<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
        background-color: #f5f5f5;
      }
      .header {
        background: #ff4500;
        color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
      }
      .header h1 {
        margin: 0;
        font-size: 24px;
      }
      .metadata {
        margin-top: 10px;
        font-size: 14px;
        opacity: 0.9;
      }
      .refresh-btn {
        background: #0079d3;
        color: white;
        padding: 8px 16px;
        text-decoration: none;
        border-radius: 4px;
        display: inline-block;
        margin-top: 10px;
      }
      .refresh-btn:hover {
        background: #006cbf;
      }
      .post {
        background: white;
        margin-bottom: 20px;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      .post-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
      }
      .post-title a {
        color: #1a1a1b;
        text-decoration: none;
      }
      .post-title a:hover {
        color: #0079d3;
      }
      .post-meta {
        color: #666;
        font-size: 12px;
        margin-bottom: 10px;
      }
      .post-content {
        margin-bottom: 15px;
        line-height: 1.6;
      }
      .comments-section {
        margin-top: 20px;
        border-top: 1px solid #eee;
        padding-top: 15px;
      }
      .comments-header {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
      }
      .comment {
        background: #f8f9fa;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 4px;
        border-left: 3px solid #0079d3;
      }
      .comment-meta {
        color: #666;
        font-size: 11px;
        margin-bottom: 5px;
      }
      .comment-body {
        font-size: 14px;
        line-height: 1.5;
      }
      .no-posts {
        text-align: center;
        padding: 40px;
        color: #666;
      }
      .score {
        font-weight: bold;
        color: #ff4500;
      }
      .subreddit-cycling {
        color: #ff4500;
      }
      .subreddit-velo {
        color: #0079d3;
      }
      .subreddit-trainerroad {
        color: #e12726;
      }
      .hot-post {
        border-left: 4px solid #ff4500;
        background: linear-gradient(90deg, #fff5f0 0%, white 20%);
      }
      .hot-indicator {
        background: #ff4500;
        color: white;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: bold;
        margin-right: 8px;
      }
      .comment-activity {
        color: #ff4500;
        font-weight: bold;
      }
      .filter-section {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      .filter-toggle {
        display: flex;
        align-items: center;
        gap: 15px;
      }
      .filter-button {
        padding: 8px 16px;
        border: 2px solid #0079d3;
        background: white;
        color: #0079d3;
        border-radius: 20px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.2s;
      }
      .filter-button.active {
        background: #0079d3;
        color: white;
      }
      .filter-button:hover {
        background: #006cbf;
        color: white;
        border-color: #006cbf;
      }
      .category-performance {
        border-left: 4px solid #28a745;
        background: linear-gradient(90deg, #f8fff9 0%, white 20%);
      }
      .category-badge {
        background: #28a745;
        color: white;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: bold;
        margin-right: 8px;
      }
      .category-badge.other {
        background: #6c757d;
      }
      .category-badge.indoor {
        background: #9146ff;
      }
      .category-badge.trainerroad {
        background: #e12726;
      }
    </style>
  </head>
  <body>
    <div class="header">
      <h1><%= title %></h1>
      <div class="metadata">
        Data fetched: <%= fetchTime.toLocaleString() %> 
        | Source: <%= dataSource %> 
        | Posts: <%= posts.length %>
        | Sources: r/cycling + r/Velo + TrainerRoad Forum
        <% if (typeof newPosts !== 'undefined' && newPosts > 0) { %>
          | New posts: <%= newPosts %>
        <% } %>
        <% if (typeof commentsProcessed !== 'undefined' && commentsProcessed > 0) { %>
          | Comments fetched: <%= commentsProcessed %>
        <% } %>
      </div>
      <a href="/reddit/refresh" class="refresh-btn">Force Refresh</a>
    </div>

    <div class="filter-section">
      <div class="filter-toggle">
        <strong>Filter by Category:</strong>
        <button class="filter-button active" onclick="filterPosts('all')" id="filter-all">
          All Posts
        </button>
        <button class="filter-button" onclick="filterPosts('Performance')" id="filter-Performance">
          Performance
        </button>
        <button class="filter-button" onclick="filterPosts('Indoor Cycling')" id="filter-Indoor-Cycling">
          Indoor Cycling
        </button>
        <button class="filter-button" onclick="filterPosts('TrainerRoad')" id="filter-TrainerRoad">
          TrainerRoad
        </button>
        <button class="filter-button" onclick="filterPosts('other')" id="filter-other">
          Other
        </button>
        <span id="filter-count" style="color: #666; font-size: 14px;"></span>
      </div>
    </div>

    <% if (posts.length === 0) { %>
      <div class="no-posts">
        <h2>No posts found for today</h2>
        <p>Try refreshing to fetch the latest data from Reddit.</p>
        <a href="/reddit/refresh" class="refresh-btn">Refresh Data</a>
      </div>
    <% } else { %>
      <% posts.forEach(function(post) { 
        // Check if this is a hot post (recent + high comments + has fetched comments)
        const postAge = Date.now() - post.created.getTime();
        const isRecent = postAge < 3600000; // Less than 1 hour old
        const hasHighComments = post.num_comments >= 15;
        const hasComments = post.comments && post.comments.length > 0;
        const isHot = isRecent && hasHighComments && hasComments;
      %>
        <div class="post <%= isHot ? 'hot-post' : '' %> <%= post.category === 'Performance' ? 'category-performance' : '' %>" data-category="<%= post.category || 'other' %>">
          <div class="post-title">
            <% if (post.category === 'Performance') { %>
              <span class="category-badge">‚ö° PERFORMANCE</span>
            <% } else if (post.category === 'Indoor Cycling') { %>
              <span class="category-badge indoor">üè† INDOOR CYCLING</span>
            <% } else if (post.category === 'TrainerRoad') { %>
              <span class="category-badge trainerroad">üö¥ TRAINERROAD</span>
            <% } else if (post.category && post.category.startsWith('Other:')) { %>
              <span class="category-badge other"><%= post.category.replace('Other:', 'üîß').trim() %></span>
            <% } else { %>
              <span class="category-badge other">üîß OTHER</span>
            <% } %>
            <% if (isHot) { %>
              <span class="hot-indicator">üî• HOT</span>
            <% } %>
            <label style="margin-right: 10px;">
              <input type="checkbox" 
                     id="response-checkbox-<%= post.id %>" 
                     <%= post.responded ? 'checked' : '' %>
                     onchange="updateResponseStatus('<%= post.id %>', this.checked)">
            </label>
            <a href="<%= post.url %>" target="_blank"><%= post.title %></a>
          </div>
          
          <div class="post-meta">
            <% if (post.subreddit) { %>
              <strong class="subreddit-<%= post.subreddit.toLowerCase() %>">r/<%= post.subreddit %></strong> | 
            <% } %>
            by u/<%= post.author %> | 
            <%= post.created.toLocaleString() %> | 
            <span class="score"><%= post.score %> points</span> | 
            <% if (hasHighComments) { %>
              <span class="comment-activity"><%= post.num_comments %> comments</span>
            <% } else { %>
              <%= post.num_comments %> comments
            <% } %>
          </div>

          <% if (post.selftext && post.selftext.trim() !== '') { %>
            <div class="post-content">
              <%= post.selftext.substring(0, 500) %><% if (post.selftext.length > 500) { %>...<% } %>
            </div>
          <% } %>

          <% if (post.comments && post.comments.length > 0) { %>
            <div class="comments-section">
              <div class="comments-header">
                Top Comments (<%= post.comments.length %> loaded):
              </div>
              
              <% post.comments.slice(0, 5).forEach(function(comment) { %>
                <div class="comment">
                  <div class="comment-meta">
                    u/<%= comment.author %> | 
                    <%= comment.created.toLocaleString() %> | 
                    <span class="score"><%= comment.score %> points</span>
                  </div>
                  <div class="comment-body">
                    <%= comment.body.substring(0, 300) %><% if (comment.body.length > 300) { %>...<% } %>
                  </div>
                </div>
              <% }); %>
              
              <% if (post.comments.length > 5) { %>
                <div style="text-align: center; margin-top: 10px; color: #666; font-size: 12px;">
                  ... and <%= post.comments.length - 5 %> more comments
                </div>
              <% } %>
            </div>
          <% } %>
        </div>
      <% }); %>
    <% } %>

    <div style="text-align: center; margin-top: 40px; color: #666; font-size: 12px;">
      <p>Smart caching: New posts fetched every 15 min, comments fetched after 1 hour (once per post)</p>
      <a href="/">‚Üê Back to Home</a>
    </div>

    <script>
      async function updateResponseStatus(postId, responded) {
        try {
          const response = await fetch('/api/update-response-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              postId: postId,
              responded: responded
            })
          });

          const result = await response.json();
          
          if (!result.success) {
            console.error('Failed to update response status:', result.error);
            // Revert checkbox state
            document.getElementById(`response-checkbox-${postId}`).checked = !responded;
          }
        } catch (error) {
          console.error('Error updating response status:', error);
          // Revert checkbox state
          document.getElementById(`response-checkbox-${postId}`).checked = !responded;
        }
      }

      function filterPosts(category) {
        const posts = document.querySelectorAll('.post');
        const filterButtons = document.querySelectorAll('.filter-button');
        const filterCount = document.getElementById('filter-count');
        
        // Update button states
        filterButtons.forEach(btn => btn.classList.remove('active'));
        const buttonId = category === 'Indoor Cycling' ? 'filter-Indoor-Cycling' : `filter-${category}`;
        document.getElementById(buttonId).classList.add('active');
        
        let visibleCount = 0;
        let categoryCounts = {
          'Performance': 0,
          'Indoor Cycling': 0, 
          'TrainerRoad': 0,
          'other': 0
        };
        
        posts.forEach(post => {
          const postCategory = post.getAttribute('data-category');
          
          // Count categories
          if (categoryCounts.hasOwnProperty(postCategory)) {
            categoryCounts[postCategory]++;
          } else if (postCategory && postCategory.startsWith('Other:')) {
            categoryCounts['other']++;
          } else {
            categoryCounts['other']++;
          }
          
          // Show/hide posts
          let shouldShow = false;
          if (category === 'all') {
            shouldShow = true;
          } else if (category === 'other') {
            shouldShow = !postCategory || postCategory === 'other' || postCategory.startsWith('Other:');
          } else {
            shouldShow = postCategory === category;
          }
          
          if (shouldShow) {
            post.style.display = 'block';
            visibleCount++;
          } else {
            post.style.display = 'none';
          }
        });
        
        // Update count display
        if (category === 'all') {
          filterCount.textContent = `(${visibleCount} total: ${categoryCounts.Performance} performance, ${categoryCounts['Indoor Cycling']} indoor, ${categoryCounts.TrainerRoad} trainerroad, ${categoryCounts.other} other)`;
        } else {
          filterCount.textContent = `(${visibleCount} ${category === 'other' ? 'other' : category.toLowerCase()} posts)`;
        }
      }

      // Initialize filter on page load
      document.addEventListener('DOMContentLoaded', function() {
        <% if (typeof filterCategory !== 'undefined' && filterCategory) { %>
          filterPosts('<%= filterCategory %>');
        <% } else { %>
          filterPosts('all');
        <% } %>
      });
    </script>
  </body>
</html>