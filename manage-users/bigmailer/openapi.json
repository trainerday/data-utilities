{
  "openapi": "3.0.0",
  "x-types": {
    "CursorDesc": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
    "CreatedDesc": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
    "SampleImage": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
    "BrandNameDesc": "Name of the brand",
    "BounceDangerPercentDesc": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
    "MaxSoftBouncesDesc": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
    "BrandURLDesc": "URL of a website associated with the brand",
    "UnsubscribeTextDesc": "A message displayed to contacts on the brand unsubscribe page.",
    "ContactLimitDesc": "The maxmimum number of contacts the brand is allowed to contain.",
    "ConnectionIDDesc": "ID of the connection used to send emails",
    "FromNameDesc": "Default name used in the \"From:\" header in campaigns sent from this brand.",
    "FromEmailDesc": "Default email used in the \"From:\" header in campaigns sent from this brand.",
    "BrandLogoDesc": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
    "ConnectionNameDesc": "Name of the connection",
    "UserRoleDesc": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
    "UserEmailDesc": "User's email address",
    "AllowedBrandsDesc": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
    "InvitationMessageDesc": "A message to include in the invitation email.",
    "UserRoles": [
      "admin",
      "account_manager",
      "brand_manager",
      "campaign_manager",
      "template_manager"
    ],
    "ConnectionTypes": [
      "aws",
      "elastic_email",
      "spark_post",
      "green_arrow",
      "pro"
    ],
    "CampaignStatuses": [
      "draft",
      "pending",
      "in progress",
      "complete",
      "error",
      "paused",
      "archived",
      "active"
    ],
    "CampaignThrottlingTypes": [
      "none",
      "burst"
    ],
    "CampaignThrottlingPeriods": [
      900,
      1800,
      3600,
      7200
    ],
    "BrandIdParam": {
      "in": "path",
      "name": "brand_id",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "ConnectionIdParam": {
      "in": "path",
      "name": "connection_id",
      "required": true,
      "type": "string",
      "description": "ID of the connection"
    },
    "ContactIdParam": {
      "in": "path",
      "name": "contact_id",
      "required": true,
      "type": "string",
      "description": "ID or email address of the contact"
    },
    "ListIdParam": {
      "in": "path",
      "name": "list_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the list"
    },
    "FieldIdParam": {
      "in": "path",
      "name": "field_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the field"
    },
    "SegmentIdParam": {
      "in": "path",
      "name": "segment_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the segment"
    },
    "SuppressionListIdParam": {
      "in": "path",
      "name": "suppression_list_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the suppression list"
    },
    "CampaignIdParam": {
      "in": "path",
      "name": "campaign_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the campaign"
    },
    "UserIdParam": {
      "in": "path",
      "name": "user_id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "ID of the user"
    },
    "LimitParam": {
      "in": "query",
      "name": "limit",
      "description": "A limit on the number of objects to be returned, between 1 and 100.",
      "type": "integer",
      "default": 10
    },
    "CursorParam": {
      "in": "query",
      "name": "cursor",
      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
      "type": "string"
    },
    "ListIdFilterParam": {
      "in": "query",
      "name": "list_id",
      "description": "The id of a list. Only contacts in this list are returned.",
      "type": "string",
      "format": "uuid"
    },
    "MessageTypeTypeParam": {
      "in": "query",
      "name": "type",
      "description": "Limit results to a specific type.",
      "type": "string",
      "enum": [
        "all",
        "account",
        "user"
      ],
      "default": "user"
    },
    "OpParam": {
      "in": "query",
      "type": "string",
      "enum": [
        "add",
        "remove",
        "replace"
      ],
      "default": "replace"
    },
    "ValidateParam": {
      "in": "query",
      "name": "validate",
      "type": "string",
      "description": "Set to true to validate the email for deliverability before adding the contact. Validation credits must be purchased before using this feature. The API does not add the contact and returns an error if the email is undeliverable.",
      "enum": [
        true,
        false
      ],
      "default": false
    },
    "HasMoreProp": {
      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
      "example": true,
      "type": "boolean"
    },
    "CursorProp": {
      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
      "type": "string"
    },
    "TotalProp": {
      "description": "The total number of items in the brand or list.",
      "example": 100,
      "type": "integer"
    },
    "FieldValuesExample": [
      {
        "name": "FIRST NAME",
        "string": "Christopher"
      },
      {
        "name": "BIRTHDAY",
        "date": "1981-12-04"
      },
      {
        "name": "EMPLOYEE ID",
        "integer": 12345
      }
    ],
    "BrandExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "My Company Ltd",
      "from_name": "Christopher",
      "from_email": "chris@example.com",
      "filter_soft_bounces": true,
      "max_soft_bounces": 5,
      "bounce_danger_percent": 15,
      "unsubscribe_text": "Sorry to see you go!",
      "connection_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
      "contact_limit": 50000,
      "url": "http://www.example.com/",
      "created": 1568654293
    },
    "BrandProperties": {
      "id": {
        "description": "ID of the brand",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the brand",
        "example": "My Company Ltd",
        "type": "string"
      },
      "from_name": {
        "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
        "example": "Christopher",
        "type": "string"
      },
      "from_email": {
        "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
        "example": "chris@example.com",
        "format": "email",
        "type": "string"
      },
      "filter_soft_bounces": {
        "description": "true if campaigns sent from this brand should exclude contacts with more than `max_soft_bounces` soft bounces, false otherwise.",
        "example": true,
        "type": "boolean"
      },
      "max_soft_bounces": {
        "description": "if filter_soft_bounces is true, the maximum number of times a contact can soft bounce before it is considered undeliverable.",
        "example": 5,
        "type": "integer"
      },
      "bounce_danger_percent": {
        "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
        "example": 15,
        "type": "integer"
      },
      "unsubscribe_text": {
        "description": "A message displayed to contacts on the brand unsubscribe page.",
        "example": "Sorry to see you go!",
        "type": "string"
      },
      "connection_id": {
        "description": "ID of the connection used to send emails",
        "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
        "format": "uuid",
        "type": "string"
      },
      "contact_limit": {
        "description": "The maxmimum number of contacts the brand is allowed to contain.",
        "example": 50000,
        "type": "integer"
      },
      "url": {
        "description": "URL of a website associated with the brand",
        "example": "http://www.example.com/",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "CreateUpdateBrandExample": {
      "name": "BigMailer Co",
      "from_name": "Chris",
      "from_email": "chris@bigmailer.io",
      "bounce_danger_percent": 15,
      "max_soft_bounces": 5,
      "url": "https://www.bigmailer.io/",
      "unsubscribe_text": "Please don't unsubscribe.",
      "contact_limit": 50000,
      "logo": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
      "connection_id": "562f699c-dbd0-4047-907c-218a2b482220"
    },
    "CreateUpdateBrandProperties": {
      "name": {
        "description": "Name of the brand",
        "example": "BigMailer Co",
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "from_name": {
        "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
        "example": "Chris",
        "type": "string"
      },
      "from_email": {
        "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
        "example": "chris@bigmailer.io",
        "type": "string",
        "format": "email"
      },
      "bounce_danger_percent": {
        "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
        "example": 15,
        "type": "integer",
        "minimum": 1,
        "maximum": 15,
        "default": 8
      },
      "max_soft_bounces": {
        "description": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
        "example": 5,
        "type": "integer",
        "minimum": 0,
        "maximum": 20,
        "default": 12
      },
      "url": {
        "description": "URL of a website associated with the brand",
        "example": "https://www.bigmailer.io/",
        "type": "string",
        "format": "url"
      },
      "unsubscribe_text": {
        "description": "A message displayed to contacts on the brand unsubscribe page.",
        "example": "Sorry to see you go!",
        "type": "string"
      },
      "contact_limit": {
        "description": "The maxmimum number of contacts the brand is allowed to contain.",
        "example": 50000,
        "type": "integer",
        "minimum": 0,
        "maximum": 1000000000,
        "multipleOf": 1000
      },
      "logo": {
        "description": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
        "example": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
        "type": "string",
        "format": "byte"
      },
      "connection_id": {
        "description": "ID of the connection used to send emails",
        "example": "562f699c-dbd0-4047-907c-218a2b482220",
        "type": "string",
        "format": "uuid"
      }
    },
    "ConnectionExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "type": "aws",
      "name": "AWS us-east-1",
      "created": 1568654293
    },
    "ConnectionProperties": {
      "id": {
        "description": "ID of the connection",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "type": {
        "description": "Service type of the connection.",
        "example": "aws",
        "enum": [
          "aws",
          "elastic_email",
          "spark_post",
          "green_arrow",
          "pro"
        ],
        "type": "string"
      },
      "name": {
        "description": "Name of the connection",
        "example": "AWS us-east-1",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "ContactExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "brand_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
      "email": "chris@bigmailer.io",
      "field_values": [
        {
          "name": "FIRST NAME",
          "string": "Christopher"
        },
        {
          "name": "BIRTHDAY",
          "date": "1981-12-04"
        },
        {
          "name": "EMPLOYEE ID",
          "integer": 12345
        }
      ],
      "list_ids": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "unsubscribe_all": false,
      "unsubscribe_ids": [
        "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
      ],
      "num_soft_bounces": 0,
      "num_hard_bounces": 0,
      "num_complaints": 0,
      "created": 1568654293
    },
    "ContactProperties": {
      "id": {
        "description": "ID of the contact",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "brand_id": {
        "description": "ID of the brand the contact is in",
        "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
        "format": "uuid",
        "type": "string"
      },
      "email": {
        "description": "Email address of the contact",
        "example": "chris@bigmailer.io",
        "format": "email",
        "type": "string"
      },
      "field_values": {
        "description": "Field values associated with the contact.\n",
        "example": [
          {
            "name": "FIRST NAME",
            "string": "Christopher"
          },
          {
            "name": "BIRTHDAY",
            "date": "1981-12-04"
          },
          {
            "name": "EMPLOYEE ID",
            "integer": 12345
          }
        ],
        "items": {
          "title": "FieldValuePayload",
          "example": {
            "name": "MEMBER ID",
            "integer": 12345
          },
          "properties": {
            "date": {
              "example": "2019-11-27",
              "format": "date",
              "type": "string"
            },
            "integer": {
              "example": 4995590933000642000,
              "format": "int64",
              "type": "integer"
            },
            "name": {
              "example": "FIRST NAME",
              "type": "string"
            },
            "string": {
              "example": "Christopher",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "list_ids": {
        "description": "IDs of the lists the contact is part of.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "unsubscribe_all": {
        "description": "true if the contact has unsubscribed from all message types, false otherwise.",
        "example": true,
        "type": "boolean"
      },
      "unsubscribe_ids": {
        "description": "IDs of message types the contact has unsubscribed from.",
        "example": [
          "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
        ],
        "items": {
          "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "num_soft_bounces": {
        "description": "Number of times a campaign sent to contact's email has soft bounced.",
        "type": "integer",
        "example": 0
      },
      "num_hard_bounces": {
        "description": "Number of times a campaign sent to contact's email has hard bounced.",
        "type": "integer",
        "example": 0
      },
      "num_complaints": {
        "description": "Number of times a campaign sent to contact's email has triggered a complaint.",
        "type": "integer",
        "example": 0
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "ListExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "High Engagement Contacts",
      "all": false,
      "created": 1568654293
    },
    "ListProperties": {
      "id": {
        "description": "ID of the list",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the list",
        "example": "High Engagement Contacts",
        "type": "string"
      },
      "all": {
        "description": "true if this list is the special system created list containing all contacts within a brand, false otherwise.",
        "example": false,
        "type": "boolean"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "CreateUpdateListExample": {
      "name": "High Engagement Contacts"
    },
    "CreateUpdateListProperties": {
      "name": {
        "description": "Name of the list",
        "example": "High Engagement Contacts",
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      }
    },
    "CreateUpdateFieldExample": {
      "name": "First Name",
      "merge_tag_name": "FIRST_NAME",
      "sample_value": "Christopher"
    },
    "CreateFieldExample": {
      "name": "First Name",
      "merge_tag_name": "FIRST_NAME",
      "sample_value": "Christopher",
      "type": "text"
    },
    "UpdateFieldExample": {
      "name": "First Name",
      "merge_tag_name": "FIRST_NAME",
      "sample_value": "Christopher"
    },
    "CreateUpdateFieldProperties": {
      "name": {
        "description": "Name of the field",
        "example": "First Name",
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "merge_tag_name": {
        "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
        "example": "FIRST_NAME",
        "type": "string",
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "sample_value": {
        "description": "A value used for the field when sending test campaigns.",
        "example": "Christopher",
        "type": "string",
        "maxLength": 50
      }
    },
    "CreateFieldProperties": {
      "name": {
        "description": "Name of the field",
        "example": "First Name",
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "merge_tag_name": {
        "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
        "example": "FIRST_NAME",
        "type": "string",
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "sample_value": {
        "description": "A value used for the field when sending test campaigns.",
        "example": "Christopher",
        "type": "string",
        "maxLength": 50
      },
      "type": {
        "description": "Type of the field",
        "example": "text",
        "type": "string",
        "enum": [
          "date",
          "integer",
          "text"
        ]
      }
    },
    "UpdateFieldProperties": {
      "name": {
        "description": "Name of the field",
        "example": "First Name",
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "merge_tag_name": {
        "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
        "example": "FIRST_NAME",
        "type": "string",
        "maxLength": 50,
        "pattern": "^\\s*\\S.*$"
      },
      "sample_value": {
        "description": "A value used for the field when sending test campaigns.",
        "example": "Christopher",
        "type": "string",
        "maxLength": 50
      }
    },
    "FieldExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "First Name",
      "type": "text",
      "merge_tag_name": "FIRST_NAME",
      "sample_value": "Christopher",
      "created": 1568654293
    },
    "FieldProperties": {
      "id": {
        "description": "ID of the field",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the field",
        "example": "First Name",
        "type": "string"
      },
      "type": {
        "description": "Data type of the field.",
        "example": "text",
        "type": "string",
        "enum": [
          "date",
          "email",
          "integer",
          "text"
        ]
      },
      "merge_tag_name": {
        "description": "Name used to reference a field's value via a template or the API. For example, if merge_tag_name is FIRST_NAME, the field can be referenced using `*|FIRST_NAME|*` in a template or `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
        "example": "FIRST_NAME",
        "type": "string"
      },
      "sample_value": {
        "description": "A value used for the field when sending test campaigns.",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "MessageTypeExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "type": "user",
      "name": "Newsletters",
      "created": 1568654293
    },
    "MessageTypeProperties": {
      "id": {
        "description": "ID of the message type",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "type": {
        "description": "The type of the message type",
        "example": "user",
        "type": "string",
        "enum": [
          "account",
          "all",
          "user"
        ]
      },
      "name": {
        "description": "Name of the message type",
        "example": "Newsletters",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "SegmentExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "Opened Campaign",
      "created": 1568654293
    },
    "SegmentProperties": {
      "id": {
        "description": "ID of the segment",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the segment",
        "example": "Opened Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "SuppressionListExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "file_name": "suppressed_contacts.csv",
      "file_size": 65536,
      "created": 1568654293
    },
    "SuppressionListProperties": {
      "id": {
        "description": "ID of the suppression list",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "file_name": {
        "description": "File name of the suppression list",
        "example": "suppressed_contacts.csv",
        "type": "string"
      },
      "file_size": {
        "description": "Size in bytes of the suppression list",
        "example": 65536,
        "type": "integer"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "CampaignNameExample": {
      "name": "March 2022 Campaign"
    },
    "CampaignNameProperties": {
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      }
    },
    "CampaignCommonExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "March 2022 Campaign",
      "created": 1568654293
    },
    "CampaignCommonProperties": {
      "id": {
        "description": "ID of the campaign",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "CampaignContentListExample": {
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!"
    },
    "CampaignContentExample": {
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "html": "<p>This is the html body.</p>",
      "text": "This is the text body."
    },
    "CampaignContentListProperties": {
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      }
    },
    "CampaignContentProperties": {
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "html": {
        "description": "HTML body of the email.",
        "example": "<p>This is the html body.</p>",
        "type": "string"
      },
      "text": {
        "description": "Text body of the email.",
        "example": "This is the text body.",
        "type": "string"
      }
    },
    "CampaignTrackingExample": {
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true
    },
    "CampaignTrackingProperties": {
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      }
    },
    "CampaignSegmentExample": {
      "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
    },
    "CampaignSegmentProperties": {
      "segment_id": {
        "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      }
    },
    "CampaignMessageTypeExample": {
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
    },
    "CampaignMessageTypeProperties": {
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      }
    },
    "CampaignListsExample": {
      "list_ids": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "excluded_list_ids": [
        "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
      ]
    },
    "CampaignListsProperties": {
      "list_ids": {
        "description": "An array of list ids to send the campaign to.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "excluded_list_ids": {
        "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
        "example": [
          "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
        ],
        "items": {
          "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      }
    },
    "CampaignScheduleExample": {
      "scheduled_for": 1568654293
    },
    "CampaignScheduleProperties": {
      "scheduled_for": {
        "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
        "example": 1568654293,
        "type": "integer"
      }
    },
    "CampaignThrottlingExample": {
      "throttling_type": "burst",
      "throttling_amount": 1000,
      "throttling_period": 900
    },
    "CampaignThrottlingProperties": {
      "throttling_type": {
        "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
        "example": "burst",
        "type": "string",
        "enum": [
          "none",
          "burst"
        ]
      },
      "throttling_amount": {
        "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
        "example": 1000,
        "type": "integer",
        "multipleOf": 1000,
        "minimum": 1000,
        "maximum": 1000000
      },
      "throttling_period": {
        "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
        "example": 900,
        "type": "integer",
        "enum": [
          900,
          1800,
          3600,
          7200
        ]
      }
    },
    "CampaignSuppressionListExample": {
      "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
    },
    "CampaignSuppressionListProperties": {
      "suppression_list_id": {
        "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      }
    },
    "CampaignTransactionalListExample": {
      "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
    },
    "CampaignTransactionalListProperties": {
      "list_id": {
        "description": "ID of a list contacts sent the transactional campaign should be added to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      }
    },
    "CampaignReadyExample": {
      "ready": true
    },
    "CampaignMetricsExample": {
      "num_sent": 100,
      "num_rejected": 10,
      "num_clicks": 20,
      "num_total_clicks": 30,
      "num_opens": 50,
      "num_total_opens": 60,
      "num_hard_bounces": 4,
      "num_soft_bounces": 8,
      "num_complaints": 2,
      "num_unsubscribes": 3
    },
    "CampaignMetricsProperties": {
      "num_sent": {
        "description": "Number of emails sent.",
        "example": 100,
        "type": "integer"
      },
      "num_rejected": {
        "description": "Number of emails rejected.",
        "example": 10,
        "type": "integer"
      },
      "num_clicks": {
        "description": "Number of unique clicks.",
        "example": 20,
        "type": "integer"
      },
      "num_total_clicks": {
        "description": "Number of total clicks (non-unique).",
        "example": 30,
        "type": "integer"
      },
      "num_opens": {
        "description": "Number of unique opens.",
        "example": 50,
        "type": "integer"
      },
      "num_total_opens": {
        "description": "Number of total opens (non-unique).",
        "example": 60,
        "type": "integer"
      },
      "num_hard_bounces": {
        "description": "Number of emails sent that hard bounced.",
        "example": 4,
        "type": "integer"
      },
      "num_soft_bounces": {
        "description": "Number of emails sent that soft bounced.",
        "example": 8,
        "type": "integer"
      },
      "num_complaints": {
        "description": "Number of emails sent that complained.",
        "example": 2,
        "type": "integer"
      },
      "num_unsubscribes": {
        "description": "Number of emails sent that unsubscribed.",
        "example": 3,
        "type": "integer"
      }
    },
    "CampaignStatusExample": {
      "status": "draft"
    },
    "CampaignStatusProperties": {
      "status": {
        "description": "Status of the campaign.",
        "example": "draft",
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "in progress",
          "complete",
          "error",
          "paused",
          "archived",
          "active"
        ]
      }
    },
    "BulkCampaignExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "March 2022 Campaign",
      "created": 1568654293,
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "html": "<p>This is the html body.</p>",
      "text": "This is the text body.",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_ids": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "excluded_list_ids": [
        "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
      ],
      "scheduled_for": 1568654293,
      "throttling_type": "burst",
      "throttling_amount": 1000,
      "throttling_period": 900,
      "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "num_sent": 100,
      "num_rejected": 10,
      "num_clicks": 20,
      "num_total_clicks": 30,
      "num_opens": 50,
      "num_total_opens": 60,
      "num_hard_bounces": 4,
      "num_soft_bounces": 8,
      "num_complaints": 2,
      "num_unsubscribes": 3,
      "status": "draft"
    },
    "BulkCampaignProperties": {
      "id": {
        "description": "ID of the campaign",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "html": {
        "description": "HTML body of the email.",
        "example": "<p>This is the html body.</p>",
        "type": "string"
      },
      "text": {
        "description": "Text body of the email.",
        "example": "This is the text body.",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "segment_id": {
        "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_ids": {
        "description": "An array of list ids to send the campaign to.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "excluded_list_ids": {
        "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
        "example": [
          "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
        ],
        "items": {
          "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "scheduled_for": {
        "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
        "example": 1568654293,
        "type": "integer"
      },
      "throttling_type": {
        "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
        "example": "burst",
        "type": "string",
        "enum": [
          "none",
          "burst"
        ]
      },
      "throttling_amount": {
        "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
        "example": 1000,
        "type": "integer",
        "multipleOf": 1000,
        "minimum": 1000,
        "maximum": 1000000
      },
      "throttling_period": {
        "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
        "example": 900,
        "type": "integer",
        "enum": [
          900,
          1800,
          3600,
          7200
        ]
      },
      "suppression_list_id": {
        "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "num_sent": {
        "description": "Number of emails sent.",
        "example": 100,
        "type": "integer"
      },
      "num_rejected": {
        "description": "Number of emails rejected.",
        "example": 10,
        "type": "integer"
      },
      "num_clicks": {
        "description": "Number of unique clicks.",
        "example": 20,
        "type": "integer"
      },
      "num_total_clicks": {
        "description": "Number of total clicks (non-unique).",
        "example": 30,
        "type": "integer"
      },
      "num_opens": {
        "description": "Number of unique opens.",
        "example": 50,
        "type": "integer"
      },
      "num_total_opens": {
        "description": "Number of total opens (non-unique).",
        "example": 60,
        "type": "integer"
      },
      "num_hard_bounces": {
        "description": "Number of emails sent that hard bounced.",
        "example": 4,
        "type": "integer"
      },
      "num_soft_bounces": {
        "description": "Number of emails sent that soft bounced.",
        "example": 8,
        "type": "integer"
      },
      "num_complaints": {
        "description": "Number of emails sent that complained.",
        "example": 2,
        "type": "integer"
      },
      "num_unsubscribes": {
        "description": "Number of emails sent that unsubscribed.",
        "example": 3,
        "type": "integer"
      },
      "status": {
        "description": "Status of the campaign.",
        "example": "draft",
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "in progress",
          "complete",
          "error",
          "paused",
          "archived",
          "active"
        ]
      }
    },
    "BulkCampaignListExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "March 2022 Campaign",
      "created": 1568654293,
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_ids": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "excluded_list_ids": [
        "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
      ],
      "scheduled_for": 1568654293,
      "throttling_type": "burst",
      "throttling_amount": 1000,
      "throttling_period": 900,
      "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "num_sent": 100,
      "num_rejected": 10,
      "num_clicks": 20,
      "num_total_clicks": 30,
      "num_opens": 50,
      "num_total_opens": 60,
      "num_hard_bounces": 4,
      "num_soft_bounces": 8,
      "num_complaints": 2,
      "num_unsubscribes": 3,
      "status": "draft"
    },
    "BulkCampaignListProperties": {
      "id": {
        "description": "ID of the campaign",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "segment_id": {
        "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_ids": {
        "description": "An array of list ids to send the campaign to.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "excluded_list_ids": {
        "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
        "example": [
          "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
        ],
        "items": {
          "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "scheduled_for": {
        "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
        "example": 1568654293,
        "type": "integer"
      },
      "throttling_type": {
        "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
        "example": "burst",
        "type": "string",
        "enum": [
          "none",
          "burst"
        ]
      },
      "throttling_amount": {
        "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
        "example": 1000,
        "type": "integer",
        "multipleOf": 1000,
        "minimum": 1000,
        "maximum": 1000000
      },
      "throttling_period": {
        "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
        "example": 900,
        "type": "integer",
        "enum": [
          900,
          1800,
          3600,
          7200
        ]
      },
      "suppression_list_id": {
        "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "num_sent": {
        "description": "Number of emails sent.",
        "example": 100,
        "type": "integer"
      },
      "num_rejected": {
        "description": "Number of emails rejected.",
        "example": 10,
        "type": "integer"
      },
      "num_clicks": {
        "description": "Number of unique clicks.",
        "example": 20,
        "type": "integer"
      },
      "num_total_clicks": {
        "description": "Number of total clicks (non-unique).",
        "example": 30,
        "type": "integer"
      },
      "num_opens": {
        "description": "Number of unique opens.",
        "example": 50,
        "type": "integer"
      },
      "num_total_opens": {
        "description": "Number of total opens (non-unique).",
        "example": 60,
        "type": "integer"
      },
      "num_hard_bounces": {
        "description": "Number of emails sent that hard bounced.",
        "example": 4,
        "type": "integer"
      },
      "num_soft_bounces": {
        "description": "Number of emails sent that soft bounced.",
        "example": 8,
        "type": "integer"
      },
      "num_complaints": {
        "description": "Number of emails sent that complained.",
        "example": 2,
        "type": "integer"
      },
      "num_unsubscribes": {
        "description": "Number of emails sent that unsubscribed.",
        "example": 3,
        "type": "integer"
      },
      "status": {
        "description": "Status of the campaign.",
        "example": "draft",
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "in progress",
          "complete",
          "error",
          "paused",
          "archived",
          "active"
        ]
      }
    },
    "CreateUpdateBulkCampaignExample": {
      "name": "March 2022 Campaign",
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "html": "<p>This is the html body.</p>",
      "text": "This is the text body.",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_ids": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "excluded_list_ids": [
        "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
      ],
      "scheduled_for": 1568654293,
      "throttling_type": "burst",
      "throttling_amount": 1000,
      "throttling_period": 900,
      "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "ready": true
    },
    "CreateUpdateBulkCampaignProperties": {
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "html": {
        "description": "HTML body of the email.",
        "example": "<p>This is the html body.</p>",
        "type": "string"
      },
      "text": {
        "description": "Text body of the email.",
        "example": "This is the text body.",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "segment_id": {
        "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_ids": {
        "description": "An array of list ids to send the campaign to.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "excluded_list_ids": {
        "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
        "example": [
          "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
        ],
        "items": {
          "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "scheduled_for": {
        "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
        "example": 1568654293,
        "type": "integer"
      },
      "throttling_type": {
        "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
        "example": "burst",
        "type": "string",
        "enum": [
          "none",
          "burst"
        ]
      },
      "throttling_amount": {
        "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
        "example": 1000,
        "type": "integer",
        "multipleOf": 1000,
        "minimum": 1000,
        "maximum": 1000000
      },
      "throttling_period": {
        "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
        "example": 900,
        "type": "integer",
        "enum": [
          900,
          1800,
          3600,
          7200
        ]
      },
      "suppression_list_id": {
        "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "ready": {
        "description": "Set to true to send or schedule the campaign. The campaign will not be sent or scheduled until activated by setting ready to true.",
        "example": true,
        "type": "boolean"
      }
    },
    "TransactionalCampaignExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "March 2022 Campaign",
      "created": 1568654293,
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "html": "<p>This is the html body.</p>",
      "text": "This is the text body.",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "num_sent": 100,
      "num_rejected": 10,
      "num_clicks": 20,
      "num_total_clicks": 30,
      "num_opens": 50,
      "num_total_opens": 60,
      "num_hard_bounces": 4,
      "num_soft_bounces": 8,
      "num_complaints": 2,
      "num_unsubscribes": 3,
      "status": "draft"
    },
    "TransactionalCampaignProperties": {
      "id": {
        "description": "ID of the campaign",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "html": {
        "description": "HTML body of the email.",
        "example": "<p>This is the html body.</p>",
        "type": "string"
      },
      "text": {
        "description": "Text body of the email.",
        "example": "This is the text body.",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_id": {
        "description": "ID of a list contacts sent the transactional campaign should be added to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "num_sent": {
        "description": "Number of emails sent.",
        "example": 100,
        "type": "integer"
      },
      "num_rejected": {
        "description": "Number of emails rejected.",
        "example": 10,
        "type": "integer"
      },
      "num_clicks": {
        "description": "Number of unique clicks.",
        "example": 20,
        "type": "integer"
      },
      "num_total_clicks": {
        "description": "Number of total clicks (non-unique).",
        "example": 30,
        "type": "integer"
      },
      "num_opens": {
        "description": "Number of unique opens.",
        "example": 50,
        "type": "integer"
      },
      "num_total_opens": {
        "description": "Number of total opens (non-unique).",
        "example": 60,
        "type": "integer"
      },
      "num_hard_bounces": {
        "description": "Number of emails sent that hard bounced.",
        "example": 4,
        "type": "integer"
      },
      "num_soft_bounces": {
        "description": "Number of emails sent that soft bounced.",
        "example": 8,
        "type": "integer"
      },
      "num_complaints": {
        "description": "Number of emails sent that complained.",
        "example": 2,
        "type": "integer"
      },
      "num_unsubscribes": {
        "description": "Number of emails sent that unsubscribed.",
        "example": 3,
        "type": "integer"
      },
      "status": {
        "description": "Status of the campaign.",
        "example": "draft",
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "in progress",
          "complete",
          "error",
          "paused",
          "archived",
          "active"
        ]
      }
    },
    "TransactionalCampaignListExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "name": "March 2022 Campaign",
      "created": 1568654293,
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "num_sent": 100,
      "num_rejected": 10,
      "num_clicks": 20,
      "num_total_clicks": 30,
      "num_opens": 50,
      "num_total_opens": 60,
      "num_hard_bounces": 4,
      "num_soft_bounces": 8,
      "num_complaints": 2,
      "num_unsubscribes": 3,
      "status": "draft"
    },
    "TransactionalCampaignListProperties": {
      "id": {
        "description": "ID of the campaign",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_id": {
        "description": "ID of a list contacts sent the transactional campaign should be added to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "num_sent": {
        "description": "Number of emails sent.",
        "example": 100,
        "type": "integer"
      },
      "num_rejected": {
        "description": "Number of emails rejected.",
        "example": 10,
        "type": "integer"
      },
      "num_clicks": {
        "description": "Number of unique clicks.",
        "example": 20,
        "type": "integer"
      },
      "num_total_clicks": {
        "description": "Number of total clicks (non-unique).",
        "example": 30,
        "type": "integer"
      },
      "num_opens": {
        "description": "Number of unique opens.",
        "example": 50,
        "type": "integer"
      },
      "num_total_opens": {
        "description": "Number of total opens (non-unique).",
        "example": 60,
        "type": "integer"
      },
      "num_hard_bounces": {
        "description": "Number of emails sent that hard bounced.",
        "example": 4,
        "type": "integer"
      },
      "num_soft_bounces": {
        "description": "Number of emails sent that soft bounced.",
        "example": 8,
        "type": "integer"
      },
      "num_complaints": {
        "description": "Number of emails sent that complained.",
        "example": 2,
        "type": "integer"
      },
      "num_unsubscribes": {
        "description": "Number of emails sent that unsubscribed.",
        "example": 3,
        "type": "integer"
      },
      "status": {
        "description": "Status of the campaign.",
        "example": "draft",
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "in progress",
          "complete",
          "error",
          "paused",
          "archived",
          "active"
        ]
      }
    },
    "CreateUpdateTransactionalCampaignExample": {
      "name": "March 2022 Campaign",
      "subject": "The January Newsletter",
      "from": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "recipient_name": "*|FIRST_NAME|*",
      "reply_to": {
        "email": "chris@bigmailer.io",
        "name": "Chris"
      },
      "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
      "preview": "Hurry, 50% Off for 2 Days Only!",
      "html": "<p>This is the html body.</p>",
      "text": "This is the text body.",
      "track_opens": true,
      "track_clicks": true,
      "track_text_clicks": true,
      "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
      "ready": true
    },
    "CreateUpdateTransactionalCampaignProperties": {
      "name": {
        "description": "Name of the campaign",
        "example": "March 2022 Campaign",
        "type": "string"
      },
      "subject": {
        "description": "Subject line for the campaign",
        "example": "The January Newsletter",
        "type": "string"
      },
      "from": {
        "properties": {
          "email": {
            "description": "From email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "From name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recipient_name": {
        "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
        "example": "*|FIRST_NAME|*",
        "type": "string"
      },
      "reply_to": {
        "properties": {
          "email": {
            "description": "Reply to email address",
            "type": "string",
            "format": "email"
          },
          "name": {
            "description": "Reply to name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "link_params": {
        "description": "Additional query string parameters to add to all links in the template.",
        "example": "utm_campaign=spring_sale&utm_medium=cpc",
        "type": "string"
      },
      "preview": {
        "description": "Copy shown following your subject line in many email clients.",
        "example": "Hurry, 50% Off for 2 Days Only!",
        "type": "string"
      },
      "html": {
        "description": "HTML body of the email.",
        "example": "<p>This is the html body.</p>",
        "type": "string"
      },
      "text": {
        "description": "Text body of the email.",
        "example": "This is the text body.",
        "type": "string"
      },
      "track_opens": {
        "description": "True to enable open tracking (HTML campaigns only).",
        "example": true,
        "type": "boolean"
      },
      "track_clicks": {
        "description": "True to enable click tracking in HTML links.",
        "example": true,
        "type": "boolean"
      },
      "track_text_clicks": {
        "description": "True to enable click tracking in text links.",
        "example": true,
        "type": "boolean"
      },
      "message_type_id": {
        "description": "ID of the message type of the campaign.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "list_id": {
        "description": "ID of a list contacts sent the transactional campaign should be added to.",
        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
        "type": "string",
        "format": "uuid"
      },
      "ready": {
        "description": "Set to true to activate the campaign. The campaign cannot be sent until activated by setting ready to true.",
        "example": true,
        "type": "boolean"
      }
    },
    "UserExample": {
      "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
      "role": "brand_manager",
      "email": "chris@bigmailer.io",
      "is_owner": true,
      "is_activated": true,
      "allowed_brands": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ],
      "activated": 1568654394,
      "created": 1568654293
    },
    "UserProperties": {
      "id": {
        "description": "ID of the user",
        "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
        "format": "uuid",
        "type": "string"
      },
      "role": {
        "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
        "example": "brand_manager",
        "type": "string",
        "enum": [
          "admin",
          "account_manager",
          "brand_manager",
          "campaign_manager",
          "template_manager"
        ]
      },
      "email": {
        "description": "User's email address",
        "example": "chris@bigmailer.io",
        "type": "string",
        "format": "email"
      },
      "is_owner": {
        "description": "true if the user is the account owner. An account owner cannot be deleted.",
        "example": true,
        "type": "boolean"
      },
      "is_activated": {
        "description": "true if the user is activated. A user becomes activated by clicking the link in the invitation email.",
        "example": true,
        "type": "boolean"
      },
      "allowed_brands": {
        "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "activated": {
        "description": "Time at which the user was activated. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      },
      "created": {
        "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
        "example": 1592422352,
        "type": "integer"
      }
    },
    "CreateUpdateUserExample": {
      "role": "brand_manager",
      "email": "chris@bigmailer.io",
      "allowed_brands": [
        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
      ]
    },
    "CreateUpdateUserProperties": {
      "role": {
        "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
        "example": "brand_manager",
        "type": "string",
        "enum": [
          "admin",
          "account_manager",
          "brand_manager",
          "campaign_manager",
          "template_manager"
        ]
      },
      "email": {
        "description": "User's email address",
        "example": "chris@bigmailer.io",
        "type": "string",
        "format": "email"
      },
      "allowed_brands": {
        "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
        "example": [
          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
        ],
        "items": {
          "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      }
    },
    "Operation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ]
    },
    "BrandsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Brands"
      ]
    },
    "ConnectionsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Connections"
      ]
    },
    "ContactsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Contacts"
      ]
    },
    "ListsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Lists"
      ]
    },
    "FieldsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Fields"
      ]
    },
    "MessageTypesOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Message Types"
      ]
    },
    "SegmentsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Segments"
      ]
    },
    "SuppressionListsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Suppression Lists"
      ]
    },
    "TransactionalCampaignsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Transactional Campaigns"
      ]
    },
    "BulkCampaignsOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Bulk Campaigns"
      ]
    },
    "UsersOperation": {
      "schemes": [
        "https"
      ],
      "security": [
        {
          "APIKey": []
        }
      ],
      "tags": [
        "Users"
      ]
    },
    "InvalidRequestError": {
      "description": "The request was invalid.",
      "schema": {
        "title": "InvalidRequestError",
        "description": "Object containing error information.",
        "example": {
          "type": "invalid_request_error",
          "message": "Email address is invalid.",
          "param": "email",
          "code": "invalid_format"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Email address is invalid.",
            "type": "string"
          },
          "param": {
            "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
            "example": "email",
            "type": "string"
          },
          "code": {
            "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
            "example": "invalid_format",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "UnauthorizedError": {
      "description": "The API key does not exist.",
      "schema": {
        "title": "Unauthorized Error",
        "description": "The API key does not exist.",
        "example": {
          "type": "authentication_error",
          "message": "Unknown API key"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "authentication_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Unknown API key",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "ForbiddenError": {
      "description": "The system understands the request but refuses to authorize it.",
      "schema": {
        "title": "Forbidden Error",
        "description": "The system understands the request but refuses to authorize it.",
        "example": {
          "type": "invalid_request_error",
          "message": "The API is only accessible over HTTPS."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "The API is only accessible over HTTPS.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "TooManyRequestsError": {
      "description": "The client has made too many requests.",
      "schema": {
        "title": "Too Many Requests Error",
        "description": "The client has made too many requests.",
        "example": {
          "type": "rate_limit_error",
          "message": "API request limit has been exceeded."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "rate_limit_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "API request limit has been exceeded.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "ServerError": {
      "description": "An unexpected error occurred.",
      "schema": {
        "title": "Server Error",
        "description": "The server encountered an unexpected error.",
        "example": {
          "type": "api_error",
          "message": "An unexpected error occurred."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "api_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "An unexpected error occurred.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "BadGatewayError": {
      "description": "The system is under heavy load or is down temporarily.",
      "schema": {
        "title": "Server Error",
        "description": "The server encountered an unexpected error.",
        "example": {
          "type": "api_error",
          "message": "An unexpected error occurred."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "api_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "An unexpected error occurred.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "UnderMaintenanceError": {
      "description": "The system is under maintenance. Please try again later.",
      "schema": {
        "title": "Under maintenance error",
        "description": "The system is under maintenance. Please try again later.",
        "example": {
          "type": "server_error",
          "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "server_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "GatewayTimeoutError": {
      "description": "The system timed out processing your request.",
      "schema": {
        "title": "Server Error",
        "description": "The server encountered an unexpected error.",
        "example": {
          "type": "api_error",
          "message": "An unexpected error occurred."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "api_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "An unexpected error occurred.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "StandardErrorResponses": {
      "400": {
        "description": "The request was invalid.",
        "schema": {
          "title": "InvalidRequestError",
          "description": "Object containing error information.",
          "example": {
            "type": "invalid_request_error",
            "message": "Email address is invalid.",
            "param": "email",
            "code": "invalid_format"
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "invalid_request_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "Email address is invalid.",
              "type": "string"
            },
            "param": {
              "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
              "example": "email",
              "type": "string"
            },
            "code": {
              "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
              "example": "invalid_format",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "401": {
        "description": "The API key does not exist.",
        "schema": {
          "title": "Unauthorized Error",
          "description": "The API key does not exist.",
          "example": {
            "type": "authentication_error",
            "message": "Unknown API key"
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "authentication_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "Unknown API key",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "403": {
        "description": "The system understands the request but refuses to authorize it.",
        "schema": {
          "title": "Forbidden Error",
          "description": "The system understands the request but refuses to authorize it.",
          "example": {
            "type": "invalid_request_error",
            "message": "The API is only accessible over HTTPS."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "invalid_request_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "The API is only accessible over HTTPS.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "429": {
        "description": "The client has made too many requests.",
        "schema": {
          "title": "Too Many Requests Error",
          "description": "The client has made too many requests.",
          "example": {
            "type": "rate_limit_error",
            "message": "API request limit has been exceeded."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "rate_limit_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "API request limit has been exceeded.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "500": {
        "description": "An unexpected error occurred.",
        "schema": {
          "title": "Server Error",
          "description": "The server encountered an unexpected error.",
          "example": {
            "type": "api_error",
            "message": "An unexpected error occurred."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "api_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "An unexpected error occurred.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "502": {
        "description": "The system is under heavy load or is down temporarily.",
        "schema": {
          "title": "Server Error",
          "description": "The server encountered an unexpected error.",
          "example": {
            "type": "api_error",
            "message": "An unexpected error occurred."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "api_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "An unexpected error occurred.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "503": {
        "description": "The system is under maintenance. Please try again later.",
        "schema": {
          "title": "Under maintenance error",
          "description": "The system is under maintenance. Please try again later.",
          "example": {
            "type": "server_error",
            "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "server_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "504": {
        "description": "The system timed out processing your request.",
        "schema": {
          "title": "Server Error",
          "description": "The server encountered an unexpected error.",
          "example": {
            "type": "api_error",
            "message": "An unexpected error occurred."
          },
          "properties": {
            "type": {
              "description": "The type of error returned.",
              "example": "api_error",
              "type": "string"
            },
            "message": {
              "description": "A human-readable message providing more details about the error.",
              "example": "An unexpected error occurred.",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "paths": {
    "/v1/brands": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Brands"
        ],
        "summary": "List brands",
        "description": "List brands in your account.",
        "operationId": "listBrands",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of brands",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBrandsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "My Company Ltd",
                        "from_name": "Christopher",
                        "from_email": "chris@example.com",
                        "filter_soft_bounces": true,
                        "max_soft_bounces": 5,
                        "bounce_danger_percent": 15,
                        "unsubscribe_text": "Sorry to see you go!",
                        "connection_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                        "contact_limit": 50000,
                        "url": "http://www.example.com/",
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the brand",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the brand",
                            "example": "My Company Ltd",
                            "type": "string"
                          },
                          "from_name": {
                            "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
                            "example": "Christopher",
                            "type": "string"
                          },
                          "from_email": {
                            "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
                            "example": "chris@example.com",
                            "format": "email",
                            "type": "string"
                          },
                          "filter_soft_bounces": {
                            "description": "true if campaigns sent from this brand should exclude contacts with more than `max_soft_bounces` soft bounces, false otherwise.",
                            "example": true,
                            "type": "boolean"
                          },
                          "max_soft_bounces": {
                            "description": "if filter_soft_bounces is true, the maximum number of times a contact can soft bounce before it is considered undeliverable.",
                            "example": 5,
                            "type": "integer"
                          },
                          "bounce_danger_percent": {
                            "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
                            "example": 15,
                            "type": "integer"
                          },
                          "unsubscribe_text": {
                            "description": "A message displayed to contacts on the brand unsubscribe page.",
                            "example": "Sorry to see you go!",
                            "type": "string"
                          },
                          "connection_id": {
                            "description": "ID of the connection used to send emails",
                            "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                            "format": "uuid",
                            "type": "string"
                          },
                          "contact_limit": {
                            "description": "The maxmimum number of contacts the brand is allowed to contain.",
                            "example": 50000,
                            "type": "integer"
                          },
                          "url": {
                            "description": "URL of a website associated with the brand",
                            "example": "http://www.example.com/",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Brands"
        ],
        "summary": "Create brand",
        "description": "Create a brand.",
        "operationId": "createBrand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateBrandPayload",
                "example": {
                  "name": "BigMailer Co",
                  "from_name": "Chris",
                  "from_email": "chris@bigmailer.io",
                  "bounce_danger_percent": 15,
                  "max_soft_bounces": 5,
                  "url": "https://www.bigmailer.io/",
                  "unsubscribe_text": "Please don't unsubscribe.",
                  "contact_limit": 50000,
                  "logo": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
                  "connection_id": "562f699c-dbd0-4047-907c-218a2b482220"
                },
                "properties": {
                  "name": {
                    "description": "Name of the brand",
                    "example": "BigMailer Co",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "from_name": {
                    "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
                    "example": "Chris",
                    "type": "string"
                  },
                  "from_email": {
                    "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
                    "example": "chris@bigmailer.io",
                    "type": "string",
                    "format": "email"
                  },
                  "bounce_danger_percent": {
                    "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
                    "example": 15,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15,
                    "default": 8
                  },
                  "max_soft_bounces": {
                    "description": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
                    "example": 5,
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 20,
                    "default": 12
                  },
                  "url": {
                    "description": "URL of a website associated with the brand",
                    "example": "https://www.bigmailer.io/",
                    "type": "string",
                    "format": "url"
                  },
                  "unsubscribe_text": {
                    "description": "A message displayed to contacts on the brand unsubscribe page.",
                    "example": "Sorry to see you go!",
                    "type": "string"
                  },
                  "contact_limit": {
                    "description": "The maxmimum number of contacts the brand is allowed to contain.",
                    "example": 50000,
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000000000,
                    "multipleOf": 1000
                  },
                  "logo": {
                    "description": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
                    "example": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
                    "type": "string",
                    "format": "byte"
                  },
                  "connection_id": {
                    "description": "ID of the connection used to send emails",
                    "example": "562f699c-dbd0-4047-907c-218a2b482220",
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "name",
                  "from_name",
                  "from_email"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Brand successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBrandResult",
                  "description": "Result of creating a brand",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the brand inserted",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Brands"
        ],
        "summary": "Get brand",
        "description": "Get a brand.",
        "operationId": "getBrand",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to get",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBrandResult",
                  "description": "Result of getting a brand",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "My Company Ltd",
                    "from_name": "Christopher",
                    "from_email": "chris@example.com",
                    "filter_soft_bounces": true,
                    "max_soft_bounces": 5,
                    "bounce_danger_percent": 15,
                    "unsubscribe_text": "Sorry to see you go!",
                    "connection_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                    "contact_limit": 50000,
                    "url": "http://www.example.com/",
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the brand",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the brand",
                      "example": "My Company Ltd",
                      "type": "string"
                    },
                    "from_name": {
                      "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
                      "example": "Christopher",
                      "type": "string"
                    },
                    "from_email": {
                      "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
                      "example": "chris@example.com",
                      "format": "email",
                      "type": "string"
                    },
                    "filter_soft_bounces": {
                      "description": "true if campaigns sent from this brand should exclude contacts with more than `max_soft_bounces` soft bounces, false otherwise.",
                      "example": true,
                      "type": "boolean"
                    },
                    "max_soft_bounces": {
                      "description": "if filter_soft_bounces is true, the maximum number of times a contact can soft bounce before it is considered undeliverable.",
                      "example": 5,
                      "type": "integer"
                    },
                    "bounce_danger_percent": {
                      "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
                      "example": 15,
                      "type": "integer"
                    },
                    "unsubscribe_text": {
                      "description": "A message displayed to contacts on the brand unsubscribe page.",
                      "example": "Sorry to see you go!",
                      "type": "string"
                    },
                    "connection_id": {
                      "description": "ID of the connection used to send emails",
                      "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                      "format": "uuid",
                      "type": "string"
                    },
                    "contact_limit": {
                      "description": "The maxmimum number of contacts the brand is allowed to contain.",
                      "example": 50000,
                      "type": "integer"
                    },
                    "url": {
                      "description": "URL of a website associated with the brand",
                      "example": "http://www.example.com/",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Brands"
        ],
        "summary": "Update brand",
        "description": "Update a brand.",
        "operationId": "updateBrand",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateBrandPayload",
                "example": {
                  "name": "BigMailer Co",
                  "from_name": "Chris",
                  "from_email": "chris@bigmailer.io",
                  "bounce_danger_percent": 15,
                  "max_soft_bounces": 5,
                  "url": "https://www.bigmailer.io/",
                  "unsubscribe_text": "Please don't unsubscribe.",
                  "contact_limit": 50000,
                  "logo": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
                  "connection_id": "562f699c-dbd0-4047-907c-218a2b482220"
                },
                "properties": {
                  "name": {
                    "description": "Name of the brand",
                    "example": "BigMailer Co",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "from_name": {
                    "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
                    "example": "Chris",
                    "type": "string"
                  },
                  "from_email": {
                    "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
                    "example": "chris@bigmailer.io",
                    "type": "string",
                    "format": "email"
                  },
                  "bounce_danger_percent": {
                    "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
                    "example": 15,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15,
                    "default": 8
                  },
                  "max_soft_bounces": {
                    "description": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
                    "example": 5,
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 20,
                    "default": 12
                  },
                  "url": {
                    "description": "URL of a website associated with the brand",
                    "example": "https://www.bigmailer.io/",
                    "type": "string",
                    "format": "url"
                  },
                  "unsubscribe_text": {
                    "description": "A message displayed to contacts on the brand unsubscribe page.",
                    "example": "Sorry to see you go!",
                    "type": "string"
                  },
                  "contact_limit": {
                    "description": "The maxmimum number of contacts the brand is allowed to contain.",
                    "example": 50000,
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000000000,
                    "multipleOf": 1000
                  },
                  "logo": {
                    "description": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
                    "example": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
                    "type": "string",
                    "format": "byte"
                  },
                  "connection_id": {
                    "description": "ID of the connection used to send emails",
                    "example": "562f699c-dbd0-4047-907c-218a2b482220",
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Brand successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateBrandResult",
                  "description": "Result of updating a brand",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the brand updated",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/connections": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Connections"
        ],
        "summary": "List connections",
        "description": "List connections in your account.",
        "operationId": "listConnections",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of connections",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListConnectionsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "type": "aws",
                        "name": "AWS us-east-1",
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the connection",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Service type of the connection.",
                            "example": "aws",
                            "enum": [
                              "aws",
                              "elastic_email",
                              "spark_post",
                              "green_arrow",
                              "pro"
                            ],
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the connection",
                            "example": "AWS us-east-1",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/connections/{connection_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Get connection",
        "description": "Get a connection.",
        "operationId": "getConnection",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "description": "ID of the connection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetConnectionResult",
                  "description": "Result of getting a connection",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "type": "aws",
                    "name": "AWS us-east-1",
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the connection",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Service type of the connection.",
                      "example": "aws",
                      "enum": [
                        "aws",
                        "elastic_email",
                        "spark_post",
                        "green_arrow",
                        "pro"
                      ],
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the connection",
                      "example": "AWS us-east-1",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Connection does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/contacts": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "List contacts",
        "description": "List contacts in a brand.",
        "operationId": "listContacts",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to list contacts in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "list_id",
            "description": "The id of a list. Only contacts in this list are returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "total": 100,
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "brand_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                        "email": "chris@bigmailer.io",
                        "field_values": [
                          {
                            "name": "FIRST NAME",
                            "string": "Christopher"
                          },
                          {
                            "name": "BIRTHDAY",
                            "date": "1981-12-04"
                          },
                          {
                            "name": "EMPLOYEE ID",
                            "integer": 12345
                          }
                        ],
                        "list_ids": [
                          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                        ],
                        "unsubscribe_all": false,
                        "unsubscribe_ids": [
                          "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                        ],
                        "num_soft_bounces": 0,
                        "num_hard_bounces": 0,
                        "num_complaints": 0,
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "total": {
                      "description": "The total number of items in the brand or list.",
                      "example": 100,
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the contact",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "brand_id": {
                            "description": "ID of the brand the contact is in",
                            "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                            "format": "uuid",
                            "type": "string"
                          },
                          "email": {
                            "description": "Email address of the contact",
                            "example": "chris@bigmailer.io",
                            "format": "email",
                            "type": "string"
                          },
                          "field_values": {
                            "description": "Field values associated with the contact.\n",
                            "example": [
                              {
                                "name": "FIRST NAME",
                                "string": "Christopher"
                              },
                              {
                                "name": "BIRTHDAY",
                                "date": "1981-12-04"
                              },
                              {
                                "name": "EMPLOYEE ID",
                                "integer": 12345
                              }
                            ],
                            "items": {
                              "title": "FieldValuePayload",
                              "example": {
                                "name": "MEMBER ID",
                                "integer": 12345
                              },
                              "properties": {
                                "date": {
                                  "example": "2019-11-27",
                                  "format": "date",
                                  "type": "string"
                                },
                                "integer": {
                                  "example": 4995590933000642000,
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "example": "FIRST NAME",
                                  "type": "string"
                                },
                                "string": {
                                  "example": "Christopher",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "list_ids": {
                            "description": "IDs of the lists the contact is part of.",
                            "example": [
                              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                            ],
                            "items": {
                              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "unsubscribe_all": {
                            "description": "true if the contact has unsubscribed from all message types, false otherwise.",
                            "example": true,
                            "type": "boolean"
                          },
                          "unsubscribe_ids": {
                            "description": "IDs of message types the contact has unsubscribed from.",
                            "example": [
                              "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                            ],
                            "items": {
                              "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "num_soft_bounces": {
                            "description": "Number of times a campaign sent to contact's email has soft bounced.",
                            "type": "integer",
                            "example": 0
                          },
                          "num_hard_bounces": {
                            "description": "Number of times a campaign sent to contact's email has hard bounced.",
                            "type": "integer",
                            "example": 0
                          },
                          "num_complaints": {
                            "description": "Number of times a campaign sent to contact's email has triggered a complaint.",
                            "type": "integer",
                            "example": 0
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "description": "Create a contact.",
        "operationId": "createContact",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create the contact in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "validate",
            "description": "Set to true to validate the email for deliverability before adding the contact. Validation credits must be purchased before using this feature. The API does not add the contact and returns an error if the email is undeliverable.",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateContactPayload",
                "example": {
                  "email": "chris@bigmailer.io",
                  "field_values": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "list_ids": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "unsubscribe_all": true,
                  "unsubscribe_ids": [
                    "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                  ]
                },
                "properties": {
                  "email": {
                    "description": "Email address of the contact",
                    "example": "chris@bigmailer.io",
                    "format": "email",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "field_values": {
                    "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
                    "example": [
                      {
                        "name": "FIRST NAME",
                        "string": "Christopher"
                      },
                      {
                        "name": "BIRTHDAY",
                        "date": "1981-12-04"
                      },
                      {
                        "name": "EMPLOYEE ID",
                        "integer": 12345
                      }
                    ],
                    "items": {
                      "title": "FieldValuePayload",
                      "example": {
                        "name": "MEMBER ID",
                        "integer": 12345
                      },
                      "properties": {
                        "date": {
                          "example": "2019-11-27",
                          "format": "date",
                          "type": "string"
                        },
                        "integer": {
                          "example": 4995590933000642000,
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "FIRST NAME",
                          "type": "string"
                        },
                        "string": {
                          "example": "Christopher",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "list_ids": {
                    "description": "IDs of lists the contact should be added to",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "unsubscribe_all": {
                    "default": false,
                    "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
                    "example": true,
                    "type": "boolean"
                  },
                  "unsubscribe_ids": {
                    "description": "IDs of message types the contact should be unsubscribed from.",
                    "example": [
                      "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                    ],
                    "items": {
                      "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateContactResult",
                  "description": "Result of creating a contact",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the contact inserted",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Contact already exists with email",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Contact Exists Error",
                  "description": "The contact already exists.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Contact already exists with this email.",
                    "param": "email",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Contact already exists with this email.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/contacts/upsert": {
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "Create or update contact",
        "description": "Create or update a contact. If the specified email does not exist, a new contact is created. If the specified email exists, the existing contact is updated.",
        "operationId": "upsertContact",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create or update the contact in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "validate",
            "description": "Set to true to validate the email for deliverability before adding the contact. Validation credits must be purchased before using this feature. The API does not add the contact and returns an error if the email is undeliverable.",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateContactPayload",
                "example": {
                  "email": "chris@bigmailer.io",
                  "field_values": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "list_ids": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "unsubscribe_all": true,
                  "unsubscribe_ids": [
                    "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                  ]
                },
                "properties": {
                  "email": {
                    "description": "Email address of the contact",
                    "example": "chris@bigmailer.io",
                    "format": "email",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "field_values": {
                    "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
                    "example": [
                      {
                        "name": "FIRST NAME",
                        "string": "Christopher"
                      },
                      {
                        "name": "BIRTHDAY",
                        "date": "1981-12-04"
                      },
                      {
                        "name": "EMPLOYEE ID",
                        "integer": 12345
                      }
                    ],
                    "items": {
                      "title": "FieldValuePayload",
                      "example": {
                        "name": "MEMBER ID",
                        "integer": 12345
                      },
                      "properties": {
                        "date": {
                          "example": "2019-11-27",
                          "format": "date",
                          "type": "string"
                        },
                        "integer": {
                          "example": 4995590933000642000,
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "FIRST NAME",
                          "type": "string"
                        },
                        "string": {
                          "example": "Christopher",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "list_ids": {
                    "description": "IDs of lists the contact should be added to",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "unsubscribe_all": {
                    "default": false,
                    "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
                    "example": true,
                    "type": "boolean"
                  },
                  "unsubscribe_ids": {
                    "description": "IDs of message types the contact should be unsubscribed from.",
                    "example": [
                      "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                    ],
                    "items": {
                      "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateContactResult",
                  "description": "Result of creating a contact",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the contact inserted",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/contacts/{contact_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact",
        "description": "Get a contact.",
        "operationId": "getContact",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to get the contact from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "contact_id",
            "required": true,
            "description": "ID or email address of the contact",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetContactResult",
                  "description": "Result of getting a contact",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "brand_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                    "email": "chris@bigmailer.io",
                    "field_values": [
                      {
                        "name": "FIRST NAME",
                        "string": "Christopher"
                      },
                      {
                        "name": "BIRTHDAY",
                        "date": "1981-12-04"
                      },
                      {
                        "name": "EMPLOYEE ID",
                        "integer": 12345
                      }
                    ],
                    "list_ids": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "unsubscribe_all": false,
                    "unsubscribe_ids": [
                      "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                    ],
                    "num_soft_bounces": 0,
                    "num_hard_bounces": 0,
                    "num_complaints": 0,
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the contact",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "brand_id": {
                      "description": "ID of the brand the contact is in",
                      "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                      "format": "uuid",
                      "type": "string"
                    },
                    "email": {
                      "description": "Email address of the contact",
                      "example": "chris@bigmailer.io",
                      "format": "email",
                      "type": "string"
                    },
                    "field_values": {
                      "description": "Field values associated with the contact.\n",
                      "example": [
                        {
                          "name": "FIRST NAME",
                          "string": "Christopher"
                        },
                        {
                          "name": "BIRTHDAY",
                          "date": "1981-12-04"
                        },
                        {
                          "name": "EMPLOYEE ID",
                          "integer": 12345
                        }
                      ],
                      "items": {
                        "title": "FieldValuePayload",
                        "example": {
                          "name": "MEMBER ID",
                          "integer": 12345
                        },
                        "properties": {
                          "date": {
                            "example": "2019-11-27",
                            "format": "date",
                            "type": "string"
                          },
                          "integer": {
                            "example": 4995590933000642000,
                            "format": "int64",
                            "type": "integer"
                          },
                          "name": {
                            "example": "FIRST NAME",
                            "type": "string"
                          },
                          "string": {
                            "example": "Christopher",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "list_ids": {
                      "description": "IDs of the lists the contact is part of.",
                      "example": [
                        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                      ],
                      "items": {
                        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "unsubscribe_all": {
                      "description": "true if the contact has unsubscribed from all message types, false otherwise.",
                      "example": true,
                      "type": "boolean"
                    },
                    "unsubscribe_ids": {
                      "description": "IDs of message types the contact has unsubscribed from.",
                      "example": [
                        "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                      ],
                      "items": {
                        "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "num_soft_bounces": {
                      "description": "Number of times a campaign sent to contact's email has soft bounced.",
                      "type": "integer",
                      "example": 0
                    },
                    "num_hard_bounces": {
                      "description": "Number of times a campaign sent to contact's email has hard bounced.",
                      "type": "integer",
                      "example": 0
                    },
                    "num_complaints": {
                      "description": "Number of times a campaign sent to contact's email has triggered a complaint.",
                      "type": "integer",
                      "example": 0
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand or contact does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact",
        "description": "Update a contact. Any parameters not provided are left unchanged.",
        "operationId": "updateContact",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update the contact in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "field_values_op",
            "description": "Controls how the API uses the supplied `field_values` object.<br><br> `add` - Copy properties in the supplied `field_values` into the contact's `field_values`. Supplied field values overwrite contact field values with the same name. Field values not supplied are preserved.<br><br> `replace` - Replace the contact's `field_values` object with the supplied `field_values`. Field values not supplied are removed from the contact.<br><br> `remove` - Remove supplied `field_values` from the contact's `field_values`.\n",
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "remove",
                "replace"
              ],
              "default": "replace"
            }
          },
          {
            "in": "query",
            "name": "list_ids_op",
            "description": "Controls how the API uses the supplied `list_ids` array.<br><br> `add` - Append supplied `list_ids` to the contact's existing `list_ids` array.<br><br> `replace` - Replace the contact's `list_ids` array with the supplied `list_ids`.<br><br> `remove` - Remove supplied `list_ids` from the contact's existing `list_ids` array.\n",
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "remove",
                "replace"
              ],
              "default": "replace"
            }
          },
          {
            "in": "query",
            "name": "unsubscribe_ids_op",
            "description": "Controls how the API uses the supplied `unsubscribe_ids` array.<br><br> `add` - Append supplied `unsubscribe_ids` to the contact's existing `unsubscribe_ids` array.<br><br> `replace` - Replace the contact's `unsubscribe_ids` array with the supplied `unsubscribe_ids`.<br><br> `remove` - Remove supplied `unsubscribe_ids` from the contact's existing `unsubscribe_ids` array.\n",
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "remove",
                "replace"
              ],
              "default": "replace"
            }
          },
          {
            "in": "path",
            "name": "contact_id",
            "required": true,
            "description": "ID or email address of the contact",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateContactPayload",
                "example": {
                  "email": "chris@bigmailer.io",
                  "field_values": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "list_ids": [
                    "42e0c094-7021-482e-a3a5-7d1479ff4687"
                  ],
                  "unsubscribe_all": true,
                  "unsubscribe_ids": [
                    "6cd48292-e792-4fa1-afeb-7f2918f1d35d"
                  ]
                },
                "properties": {
                  "email": {
                    "description": "Email address of the contact",
                    "example": "chris@bigmailer.io",
                    "format": "email",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "field_values": {
                    "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
                    "example": [
                      {
                        "name": "FIRST NAME",
                        "string": "Christopher"
                      },
                      {
                        "name": "BIRTHDAY",
                        "date": "1981-12-04"
                      },
                      {
                        "name": "EMPLOYEE ID",
                        "integer": 12345
                      }
                    ],
                    "items": {
                      "title": "FieldValuePayload",
                      "example": {
                        "name": "MEMBER ID",
                        "integer": 12345
                      },
                      "properties": {
                        "date": {
                          "example": "2019-11-27",
                          "format": "date",
                          "type": "string"
                        },
                        "integer": {
                          "example": 4995590933000642000,
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "FIRST NAME",
                          "type": "string"
                        },
                        "string": {
                          "example": "Christopher",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "list_ids": {
                    "description": "IDs of lists the contact should be added to",
                    "example": [
                      "42e0c094-7021-482e-a3a5-7d1479ff4687"
                    ],
                    "items": {
                      "example": "42e0c094-7021-482e-a3a5-7d1479ff4687",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "unsubscribe_all": {
                    "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
                    "example": true,
                    "type": "boolean"
                  },
                  "unsubscribe_ids": {
                    "description": "IDs of message types the contact should be unsubscribed from.",
                    "example": [
                      "6cd48292-e792-4fa1-afeb-7f2918f1d35d"
                    ],
                    "items": {
                      "example": "6cd48292-e792-4fa1-afeb-7f2918f1d35d",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateContactResult",
                  "description": "Result of updating a contact",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the contact updated",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand or contact does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Contact already exists with email",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Contact Exists Error",
                  "description": "The contact already exists.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Contact already exists with this email.",
                    "param": "email",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Contact already exists with this email.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact",
        "description": "Delete a contact.",
        "operationId": "deleteContact",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to delete the contact from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "contact_id",
            "required": true,
            "description": "ID or email address of the contact",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteContactResult",
                  "description": "Result of deleting a contact",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the contact deleted",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Brand or contact does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/lists": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Lists"
        ],
        "summary": "List lists",
        "description": "Retrieve lists in a brand.",
        "operationId": "listLists",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve lists from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of lists",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListListsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "High Engagement Contacts",
                        "all": false,
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the list",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the list",
                            "example": "High Engagement Contacts",
                            "type": "string"
                          },
                          "all": {
                            "description": "true if this list is the special system created list containing all contacts within a brand, false otherwise.",
                            "example": false,
                            "type": "boolean"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Lists"
        ],
        "summary": "Create list",
        "description": "Create a list.",
        "operationId": "createList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create a list in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateListPayload",
                "example": {
                  "name": "High Engagement Contacts"
                },
                "properties": {
                  "name": {
                    "description": "Name of the list",
                    "example": "High Engagement Contacts",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateListResult",
                  "description": "Result of creating a list",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the list inserted",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/lists/{list_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Lists"
        ],
        "summary": "Get list",
        "description": "Get a list.",
        "operationId": "getList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "description": "ID of the list",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetListResult",
                  "description": "Result of getting a list",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "High Engagement Contacts",
                    "all": false,
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the list",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the list",
                      "example": "High Engagement Contacts",
                      "type": "string"
                    },
                    "all": {
                      "description": "true if this list is the special system created list containing all contacts within a brand, false otherwise.",
                      "example": false,
                      "type": "boolean"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "List does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Lists"
        ],
        "summary": "Update list",
        "description": "Update a list.",
        "operationId": "updateList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update a list in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "description": "ID of the list",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateListPayload",
                "example": {
                  "name": "High Engagement Contacts"
                },
                "properties": {
                  "name": {
                    "description": "Name of the list",
                    "example": "High Engagement Contacts",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateListResult",
                  "description": "Result of updating a list",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the list updated",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "List does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Lists"
        ],
        "summary": "Delete list",
        "description": "Delete a list. Contacts in the list are NOT deleted.",
        "operationId": "deleteList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "description": "ID of the list",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteListResult",
                  "description": "Result of deleting a list",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the list deleted",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "List does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/fields": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Fields"
        ],
        "summary": "List fields",
        "description": "List fields in a brand.",
        "operationId": "listFields",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve fields from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of fields",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListFieldsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "First Name",
                        "type": "text",
                        "merge_tag_name": "FIRST_NAME",
                        "sample_value": "Christopher",
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the field",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the field",
                            "example": "First Name",
                            "type": "string"
                          },
                          "type": {
                            "description": "Data type of the field.",
                            "example": "text",
                            "type": "string",
                            "enum": [
                              "date",
                              "email",
                              "integer",
                              "text"
                            ]
                          },
                          "merge_tag_name": {
                            "description": "Name used to reference a field's value via a template or the API. For example, if merge_tag_name is FIRST_NAME, the field can be referenced using `*|FIRST_NAME|*` in a template or `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
                            "example": "FIRST_NAME",
                            "type": "string"
                          },
                          "sample_value": {
                            "description": "A value used for the field when sending test campaigns.",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Fields"
        ],
        "summary": "Create field",
        "description": "Create a field.",
        "operationId": "createField",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create a field in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateFieldPayload",
                "example": {
                  "name": "First Name",
                  "merge_tag_name": "FIRST_NAME",
                  "sample_value": "Christopher",
                  "type": "text"
                },
                "properties": {
                  "name": {
                    "description": "Name of the field",
                    "example": "First Name",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "pattern": "^\\s*\\S.*$"
                  },
                  "merge_tag_name": {
                    "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
                    "example": "FIRST_NAME",
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^\\s*\\S.*$"
                  },
                  "sample_value": {
                    "description": "A value used for the field when sending test campaigns.",
                    "example": "Christopher",
                    "type": "string",
                    "maxLength": 50
                  },
                  "type": {
                    "description": "Type of the field",
                    "example": "text",
                    "type": "string",
                    "enum": [
                      "date",
                      "integer",
                      "text"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Field successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateFieldResult",
                  "description": "Result of creating a field",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the field created",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Field already exists with the merge_tag_name.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Field Exists Error",
                  "description": "A field already exists with the chosen merge tag name.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Field already exists with this merge_tag_name.",
                    "param": "merge_tag_name",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Field already exists with this merge_tag_name.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/fields/{field_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Fields"
        ],
        "summary": "Get field",
        "description": "Get a field.",
        "operationId": "getField",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "description": "ID of the field",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetFieldResult",
                  "description": "Result of getting a field",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "First Name",
                    "type": "text",
                    "merge_tag_name": "FIRST_NAME",
                    "sample_value": "Christopher",
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the field",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the field",
                      "example": "First Name",
                      "type": "string"
                    },
                    "type": {
                      "description": "Data type of the field.",
                      "example": "text",
                      "type": "string",
                      "enum": [
                        "date",
                        "email",
                        "integer",
                        "text"
                      ]
                    },
                    "merge_tag_name": {
                      "description": "Name used to reference a field's value via a template or the API. For example, if merge_tag_name is FIRST_NAME, the field can be referenced using `*|FIRST_NAME|*` in a template or `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
                      "example": "FIRST_NAME",
                      "type": "string"
                    },
                    "sample_value": {
                      "description": "A value used for the field when sending test campaigns.",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Field does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Fields"
        ],
        "summary": "Update field",
        "description": "Update a field.",
        "operationId": "updateField",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update a field in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "description": "ID of the field",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateFieldPayload",
                "example": {
                  "name": "First Name",
                  "merge_tag_name": "FIRST_NAME",
                  "sample_value": "Christopher"
                },
                "properties": {
                  "name": {
                    "description": "Name of the field",
                    "example": "First Name",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "pattern": "^\\s*\\S.*$"
                  },
                  "merge_tag_name": {
                    "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
                    "example": "FIRST_NAME",
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^\\s*\\S.*$"
                  },
                  "sample_value": {
                    "description": "A value used for the field when sending test campaigns.",
                    "example": "Christopher",
                    "type": "string",
                    "maxLength": 50
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Field successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateFieldResult",
                  "description": "Result of updating a field",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the field updated",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Field does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Field already exists with the merge_tag_name.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Field Exists Error",
                  "description": "A field already exists with the chosen merge tag name.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Field already exists with this merge_tag_name.",
                    "param": "merge_tag_name",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Field already exists with this merge_tag_name.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Fields"
        ],
        "summary": "Delete field",
        "description": "Delete a field.",
        "operationId": "deleteField",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "description": "ID of the field",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteFieldResult",
                  "description": "Result of deleting a field",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the field deleted",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Field does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/message-types": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Message Types"
        ],
        "summary": "List message types",
        "description": "List message types in a brand.",
        "operationId": "listMessageTypes",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve message types from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Limit results to a specific type.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "account",
                "user"
              ],
              "default": "user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of message types",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListMessageTypesResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "type": "user",
                        "name": "Newsletters",
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the message type",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the message type",
                            "example": "user",
                            "type": "string",
                            "enum": [
                              "account",
                              "all",
                              "user"
                            ]
                          },
                          "name": {
                            "description": "Name of the message type",
                            "example": "Newsletters",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/segments": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Segments"
        ],
        "summary": "List segments",
        "description": "Retrieve segments in a brand.",
        "operationId": "listSegments",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve segments from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of segments",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListSegmentsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "Opened Campaign",
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the segment",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the segment",
                            "example": "Opened Campaign",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/segments/{segment_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Segments"
        ],
        "summary": "Get segment",
        "description": "Get a segment.",
        "operationId": "getSegment",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "description": "ID of the segment",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSegmentResult",
                  "description": "Result of getting a segment",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "Opened Campaign",
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the segment",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the segment",
                      "example": "Opened Campaign",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Segment does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/suppression-lists": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Suppression Lists"
        ],
        "summary": "List suppression lists",
        "description": "Retrieve suppression lists in a brand.",
        "operationId": "listSuppressionLists",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve suppression lists from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of suppression lists",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListSuppressionListsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "file_name": "suppressed_contacts.csv",
                        "file_size": 65536,
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the suppression list",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "file_name": {
                            "description": "File name of the suppression list",
                            "example": "suppressed_contacts.csv",
                            "type": "string"
                          },
                          "file_size": {
                            "description": "Size in bytes of the suppression list",
                            "example": 65536,
                            "type": "integer"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Suppression Lists"
        ],
        "summary": "Upload suppression list",
        "description": "Upload a suppression list.",
        "operationId": "createSuppressionList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to upload a suppression list in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "A CSV file containing email addresses in the first column of each row.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Suppression list successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSuppressionListResult",
                  "description": "Result of creating a suppression list",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the suppression list created.",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/suppression-lists/{suppression_list_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Suppression Lists"
        ],
        "summary": "Get suppression list",
        "description": "Get a suppression list.",
        "operationId": "getSuppressionList",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "suppression_list_id",
            "required": true,
            "description": "ID of the suppression list",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSuppressionListResult",
                  "description": "Result of getting a suppression list",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "file_name": "suppressed_contacts.csv",
                    "file_size": 65536,
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the suppression list",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "file_name": {
                      "description": "File name of the suppression list",
                      "example": "suppressed_contacts.csv",
                      "type": "string"
                    },
                    "file_size": {
                      "description": "Size in bytes of the suppression list",
                      "example": 65536,
                      "type": "integer"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Suppression list does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/bulk-campaigns": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Bulk Campaigns"
        ],
        "summary": "List bulk campaigns",
        "description": "Retrieve bulk campaigns in a brand.",
        "operationId": "listBulkCampaigns",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve bulk campaigns from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bulk campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBulkCampaignsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "March 2022 Campaign",
                        "created": 1568654293,
                        "subject": "The January Newsletter",
                        "from": {
                          "email": "chris@bigmailer.io",
                          "name": "Chris"
                        },
                        "recipient_name": "*|FIRST_NAME|*",
                        "reply_to": {
                          "email": "chris@bigmailer.io",
                          "name": "Chris"
                        },
                        "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                        "preview": "Hurry, 50% Off for 2 Days Only!",
                        "track_opens": true,
                        "track_clicks": true,
                        "track_text_clicks": true,
                        "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "list_ids": [
                          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                        ],
                        "excluded_list_ids": [
                          "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                        ],
                        "scheduled_for": 1568654293,
                        "throttling_type": "burst",
                        "throttling_amount": 1000,
                        "throttling_period": 900,
                        "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "num_sent": 100,
                        "num_rejected": 10,
                        "num_clicks": 20,
                        "num_total_clicks": 30,
                        "num_opens": 50,
                        "num_total_opens": 60,
                        "num_hard_bounces": 4,
                        "num_soft_bounces": 8,
                        "num_complaints": 2,
                        "num_unsubscribes": 3,
                        "status": "draft"
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the campaign",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the campaign",
                            "example": "March 2022 Campaign",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          },
                          "subject": {
                            "description": "Subject line for the campaign",
                            "example": "The January Newsletter",
                            "type": "string"
                          },
                          "from": {
                            "properties": {
                              "email": {
                                "description": "From email address",
                                "type": "string",
                                "format": "email"
                              },
                              "name": {
                                "description": "From name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "recipient_name": {
                            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                            "example": "*|FIRST_NAME|*",
                            "type": "string"
                          },
                          "reply_to": {
                            "properties": {
                              "email": {
                                "description": "Reply to email address",
                                "type": "string",
                                "format": "email"
                              },
                              "name": {
                                "description": "Reply to name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "link_params": {
                            "description": "Additional query string parameters to add to all links in the template.",
                            "example": "utm_campaign=spring_sale&utm_medium=cpc",
                            "type": "string"
                          },
                          "preview": {
                            "description": "Copy shown following your subject line in many email clients.",
                            "example": "Hurry, 50% Off for 2 Days Only!",
                            "type": "string"
                          },
                          "track_opens": {
                            "description": "True to enable open tracking (HTML campaigns only).",
                            "example": true,
                            "type": "boolean"
                          },
                          "track_clicks": {
                            "description": "True to enable click tracking in HTML links.",
                            "example": true,
                            "type": "boolean"
                          },
                          "track_text_clicks": {
                            "description": "True to enable click tracking in text links.",
                            "example": true,
                            "type": "boolean"
                          },
                          "segment_id": {
                            "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
                            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                            "type": "string",
                            "format": "uuid"
                          },
                          "message_type_id": {
                            "description": "ID of the message type of the campaign.",
                            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                            "type": "string",
                            "format": "uuid"
                          },
                          "list_ids": {
                            "description": "An array of list ids to send the campaign to.",
                            "example": [
                              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                            ],
                            "items": {
                              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "excluded_list_ids": {
                            "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
                            "example": [
                              "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                            ],
                            "items": {
                              "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "scheduled_for": {
                            "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
                            "example": 1568654293,
                            "type": "integer"
                          },
                          "throttling_type": {
                            "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
                            "example": "burst",
                            "type": "string",
                            "enum": [
                              "none",
                              "burst"
                            ]
                          },
                          "throttling_amount": {
                            "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
                            "example": 1000,
                            "type": "integer",
                            "multipleOf": 1000,
                            "minimum": 1000,
                            "maximum": 1000000
                          },
                          "throttling_period": {
                            "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
                            "example": 900,
                            "type": "integer",
                            "enum": [
                              900,
                              1800,
                              3600,
                              7200
                            ]
                          },
                          "suppression_list_id": {
                            "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
                            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                            "type": "string",
                            "format": "uuid"
                          },
                          "num_sent": {
                            "description": "Number of emails sent.",
                            "example": 100,
                            "type": "integer"
                          },
                          "num_rejected": {
                            "description": "Number of emails rejected.",
                            "example": 10,
                            "type": "integer"
                          },
                          "num_clicks": {
                            "description": "Number of unique clicks.",
                            "example": 20,
                            "type": "integer"
                          },
                          "num_total_clicks": {
                            "description": "Number of total clicks (non-unique).",
                            "example": 30,
                            "type": "integer"
                          },
                          "num_opens": {
                            "description": "Number of unique opens.",
                            "example": 50,
                            "type": "integer"
                          },
                          "num_total_opens": {
                            "description": "Number of total opens (non-unique).",
                            "example": 60,
                            "type": "integer"
                          },
                          "num_hard_bounces": {
                            "description": "Number of emails sent that hard bounced.",
                            "example": 4,
                            "type": "integer"
                          },
                          "num_soft_bounces": {
                            "description": "Number of emails sent that soft bounced.",
                            "example": 8,
                            "type": "integer"
                          },
                          "num_complaints": {
                            "description": "Number of emails sent that complained.",
                            "example": 2,
                            "type": "integer"
                          },
                          "num_unsubscribes": {
                            "description": "Number of emails sent that unsubscribed.",
                            "example": 3,
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status of the campaign.",
                            "example": "draft",
                            "type": "string",
                            "enum": [
                              "draft",
                              "pending",
                              "in progress",
                              "complete",
                              "error",
                              "paused",
                              "archived",
                              "active"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Bulk Campaigns"
        ],
        "summary": "Create a bulk campaign",
        "description": "Create a bulk campaign.",
        "operationId": "createBulkCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create a campaign in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateBulkCampaignPayload",
                "example": {
                  "name": "March 2022 Campaign",
                  "subject": "The January Newsletter",
                  "from": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "recipient_name": "*|FIRST_NAME|*",
                  "reply_to": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                  "preview": "Hurry, 50% Off for 2 Days Only!",
                  "html": "<p>This is the html body.</p>",
                  "text": "This is the text body.",
                  "track_opens": true,
                  "track_clicks": true,
                  "track_text_clicks": true,
                  "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "list_ids": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "excluded_list_ids": [
                    "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                  ],
                  "scheduled_for": 1568654293,
                  "throttling_type": "burst",
                  "throttling_amount": 1000,
                  "throttling_period": 900,
                  "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "ready": true
                },
                "properties": {
                  "name": {
                    "description": "Name of the campaign",
                    "example": "March 2022 Campaign",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject line for the campaign",
                    "example": "The January Newsletter",
                    "type": "string"
                  },
                  "from": {
                    "properties": {
                      "email": {
                        "description": "From email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "From name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "recipient_name": {
                    "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                    "example": "*|FIRST_NAME|*",
                    "type": "string"
                  },
                  "reply_to": {
                    "properties": {
                      "email": {
                        "description": "Reply to email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "Reply to name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "link_params": {
                    "description": "Additional query string parameters to add to all links in the template.",
                    "example": "utm_campaign=spring_sale&utm_medium=cpc",
                    "type": "string"
                  },
                  "preview": {
                    "description": "Copy shown following your subject line in many email clients.",
                    "example": "Hurry, 50% Off for 2 Days Only!",
                    "type": "string"
                  },
                  "html": {
                    "description": "HTML body of the email.",
                    "example": "<p>This is the html body.</p>",
                    "type": "string"
                  },
                  "text": {
                    "description": "Text body of the email.",
                    "example": "This is the text body.",
                    "type": "string"
                  },
                  "track_opens": {
                    "description": "True to enable open tracking (HTML campaigns only).",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_clicks": {
                    "description": "True to enable click tracking in HTML links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_text_clicks": {
                    "description": "True to enable click tracking in text links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "segment_id": {
                    "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "message_type_id": {
                    "description": "ID of the message type of the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "list_ids": {
                    "description": "An array of list ids to send the campaign to.",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "excluded_list_ids": {
                    "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
                    "example": [
                      "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                    ],
                    "items": {
                      "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "scheduled_for": {
                    "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
                    "example": 1568654293,
                    "type": "integer"
                  },
                  "throttling_type": {
                    "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
                    "example": "burst",
                    "type": "string",
                    "enum": [
                      "none",
                      "burst"
                    ]
                  },
                  "throttling_amount": {
                    "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
                    "example": 1000,
                    "type": "integer",
                    "multipleOf": 1000,
                    "minimum": 1000,
                    "maximum": 1000000
                  },
                  "throttling_period": {
                    "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
                    "example": 900,
                    "type": "integer",
                    "enum": [
                      900,
                      1800,
                      3600,
                      7200
                    ]
                  },
                  "suppression_list_id": {
                    "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "ready": {
                    "description": "Set to true to send or schedule the campaign. The campaign will not be sent or scheduled until activated by setting ready to true.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bulk campaign was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBulkCampaignResult",
                  "description": "Result of creating a bulk campaign",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the bulk campaign created.",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "The campaign cannot be sent in it's current state. See https://docs.bigmailer.io/docs/campaign-api-precondition-codes for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Precondition failed error",
                  "description": "The operation was rejected because the system is not in a state required for the operation's execution.",
                  "example": {
                    "type": "failed_precondition",
                    "message": "The campaign cannot be sent in it's current state.",
                    "preconditions": [
                      "subject.format",
                      "lists.length"
                    ]
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "failed_precondition",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The campaign cannot be sent in it's current state.",
                      "type": "string"
                    },
                    "preconditions": {
                      "description": "A list of codes to aid in handling the error programatically.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "subject.format",
                        "lists.length"
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/bulk-campaigns/{campaign_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Bulk Campaigns"
        ],
        "summary": "Get bulk campaign",
        "description": "Get a bulk campaign.",
        "operationId": "getBulkCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "campaign_id",
            "required": true,
            "description": "ID of the campaign",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBulkCampaignResult",
                  "description": "Result of getting a bulk campaign",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "March 2022 Campaign",
                    "created": 1568654293,
                    "subject": "The January Newsletter",
                    "from": {
                      "email": "chris@bigmailer.io",
                      "name": "Chris"
                    },
                    "recipient_name": "*|FIRST_NAME|*",
                    "reply_to": {
                      "email": "chris@bigmailer.io",
                      "name": "Chris"
                    },
                    "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                    "preview": "Hurry, 50% Off for 2 Days Only!",
                    "html": "<p>This is the html body.</p>",
                    "text": "This is the text body.",
                    "track_opens": true,
                    "track_clicks": true,
                    "track_text_clicks": true,
                    "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "list_ids": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "excluded_list_ids": [
                      "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                    ],
                    "scheduled_for": 1568654293,
                    "throttling_type": "burst",
                    "throttling_amount": 1000,
                    "throttling_period": 900,
                    "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "num_sent": 100,
                    "num_rejected": 10,
                    "num_clicks": 20,
                    "num_total_clicks": 30,
                    "num_opens": 50,
                    "num_total_opens": 60,
                    "num_hard_bounces": 4,
                    "num_soft_bounces": 8,
                    "num_complaints": 2,
                    "num_unsubscribes": 3,
                    "status": "draft"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the campaign",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the campaign",
                      "example": "March 2022 Campaign",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    },
                    "subject": {
                      "description": "Subject line for the campaign",
                      "example": "The January Newsletter",
                      "type": "string"
                    },
                    "from": {
                      "properties": {
                        "email": {
                          "description": "From email address",
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "description": "From name",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "recipient_name": {
                      "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                      "example": "*|FIRST_NAME|*",
                      "type": "string"
                    },
                    "reply_to": {
                      "properties": {
                        "email": {
                          "description": "Reply to email address",
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "description": "Reply to name",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "link_params": {
                      "description": "Additional query string parameters to add to all links in the template.",
                      "example": "utm_campaign=spring_sale&utm_medium=cpc",
                      "type": "string"
                    },
                    "preview": {
                      "description": "Copy shown following your subject line in many email clients.",
                      "example": "Hurry, 50% Off for 2 Days Only!",
                      "type": "string"
                    },
                    "html": {
                      "description": "HTML body of the email.",
                      "example": "<p>This is the html body.</p>",
                      "type": "string"
                    },
                    "text": {
                      "description": "Text body of the email.",
                      "example": "This is the text body.",
                      "type": "string"
                    },
                    "track_opens": {
                      "description": "True to enable open tracking (HTML campaigns only).",
                      "example": true,
                      "type": "boolean"
                    },
                    "track_clicks": {
                      "description": "True to enable click tracking in HTML links.",
                      "example": true,
                      "type": "boolean"
                    },
                    "track_text_clicks": {
                      "description": "True to enable click tracking in text links.",
                      "example": true,
                      "type": "boolean"
                    },
                    "segment_id": {
                      "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "type": "string",
                      "format": "uuid"
                    },
                    "message_type_id": {
                      "description": "ID of the message type of the campaign.",
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "type": "string",
                      "format": "uuid"
                    },
                    "list_ids": {
                      "description": "An array of list ids to send the campaign to.",
                      "example": [
                        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                      ],
                      "items": {
                        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "excluded_list_ids": {
                      "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
                      "example": [
                        "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                      ],
                      "items": {
                        "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "scheduled_for": {
                      "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
                      "example": 1568654293,
                      "type": "integer"
                    },
                    "throttling_type": {
                      "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
                      "example": "burst",
                      "type": "string",
                      "enum": [
                        "none",
                        "burst"
                      ]
                    },
                    "throttling_amount": {
                      "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
                      "example": 1000,
                      "type": "integer",
                      "multipleOf": 1000,
                      "minimum": 1000,
                      "maximum": 1000000
                    },
                    "throttling_period": {
                      "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
                      "example": 900,
                      "type": "integer",
                      "enum": [
                        900,
                        1800,
                        3600,
                        7200
                      ]
                    },
                    "suppression_list_id": {
                      "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "type": "string",
                      "format": "uuid"
                    },
                    "num_sent": {
                      "description": "Number of emails sent.",
                      "example": 100,
                      "type": "integer"
                    },
                    "num_rejected": {
                      "description": "Number of emails rejected.",
                      "example": 10,
                      "type": "integer"
                    },
                    "num_clicks": {
                      "description": "Number of unique clicks.",
                      "example": 20,
                      "type": "integer"
                    },
                    "num_total_clicks": {
                      "description": "Number of total clicks (non-unique).",
                      "example": 30,
                      "type": "integer"
                    },
                    "num_opens": {
                      "description": "Number of unique opens.",
                      "example": 50,
                      "type": "integer"
                    },
                    "num_total_opens": {
                      "description": "Number of total opens (non-unique).",
                      "example": 60,
                      "type": "integer"
                    },
                    "num_hard_bounces": {
                      "description": "Number of emails sent that hard bounced.",
                      "example": 4,
                      "type": "integer"
                    },
                    "num_soft_bounces": {
                      "description": "Number of emails sent that soft bounced.",
                      "example": 8,
                      "type": "integer"
                    },
                    "num_complaints": {
                      "description": "Number of emails sent that complained.",
                      "example": 2,
                      "type": "integer"
                    },
                    "num_unsubscribes": {
                      "description": "Number of emails sent that unsubscribed.",
                      "example": 3,
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the campaign.",
                      "example": "draft",
                      "type": "string",
                      "enum": [
                        "draft",
                        "pending",
                        "in progress",
                        "complete",
                        "error",
                        "paused",
                        "archived",
                        "active"
                      ]
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Campaign does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Bulk Campaigns"
        ],
        "summary": "Update a bulk campaign",
        "description": "Update a bulk campaign.",
        "operationId": "updateBulkCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update a campaign in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "campaign_id",
            "required": true,
            "description": "ID of the campaign",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateBulkCampaignPayload",
                "example": {
                  "name": "March 2022 Campaign",
                  "subject": "The January Newsletter",
                  "from": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "recipient_name": "*|FIRST_NAME|*",
                  "reply_to": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                  "preview": "Hurry, 50% Off for 2 Days Only!",
                  "html": "<p>This is the html body.</p>",
                  "text": "This is the text body.",
                  "track_opens": true,
                  "track_clicks": true,
                  "track_text_clicks": true,
                  "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "list_ids": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "excluded_list_ids": [
                    "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                  ],
                  "scheduled_for": 1568654293,
                  "throttling_type": "burst",
                  "throttling_amount": 1000,
                  "throttling_period": 900,
                  "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "ready": true
                },
                "properties": {
                  "name": {
                    "description": "Name of the campaign",
                    "example": "March 2022 Campaign",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject line for the campaign",
                    "example": "The January Newsletter",
                    "type": "string"
                  },
                  "from": {
                    "properties": {
                      "email": {
                        "description": "From email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "From name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "recipient_name": {
                    "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                    "example": "*|FIRST_NAME|*",
                    "type": "string"
                  },
                  "reply_to": {
                    "properties": {
                      "email": {
                        "description": "Reply to email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "Reply to name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "link_params": {
                    "description": "Additional query string parameters to add to all links in the template.",
                    "example": "utm_campaign=spring_sale&utm_medium=cpc",
                    "type": "string"
                  },
                  "preview": {
                    "description": "Copy shown following your subject line in many email clients.",
                    "example": "Hurry, 50% Off for 2 Days Only!",
                    "type": "string"
                  },
                  "html": {
                    "description": "HTML body of the email.",
                    "example": "<p>This is the html body.</p>",
                    "type": "string"
                  },
                  "text": {
                    "description": "Text body of the email.",
                    "example": "This is the text body.",
                    "type": "string"
                  },
                  "track_opens": {
                    "description": "True to enable open tracking (HTML campaigns only).",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_clicks": {
                    "description": "True to enable click tracking in HTML links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_text_clicks": {
                    "description": "True to enable click tracking in text links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "segment_id": {
                    "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "message_type_id": {
                    "description": "ID of the message type of the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "list_ids": {
                    "description": "An array of list ids to send the campaign to.",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "excluded_list_ids": {
                    "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
                    "example": [
                      "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                    ],
                    "items": {
                      "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "scheduled_for": {
                    "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
                    "example": 1568654293,
                    "type": "integer"
                  },
                  "throttling_type": {
                    "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
                    "example": "burst",
                    "type": "string",
                    "enum": [
                      "none",
                      "burst"
                    ]
                  },
                  "throttling_amount": {
                    "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
                    "example": 1000,
                    "type": "integer",
                    "multipleOf": 1000,
                    "minimum": 1000,
                    "maximum": 1000000
                  },
                  "throttling_period": {
                    "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
                    "example": 900,
                    "type": "integer",
                    "enum": [
                      900,
                      1800,
                      3600,
                      7200
                    ]
                  },
                  "suppression_list_id": {
                    "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "ready": {
                    "description": "Set to true to send or schedule the campaign. The campaign will not be sent or scheduled until activated by setting ready to true.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bulk campaign was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateBulkCampaignResult",
                  "description": "Result of updating a bulk campaign",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the bulk campaign updated.",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Campaign does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "The campaign cannot be sent in it's current state. See https://docs.bigmailer.io/docs/campaign-api-precondition-codes for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Precondition failed error",
                  "description": "The operation was rejected because the system is not in a state required for the operation's execution.",
                  "example": {
                    "type": "failed_precondition",
                    "message": "The campaign cannot be sent in it's current state.",
                    "preconditions": [
                      "subject.format",
                      "lists.length"
                    ]
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "failed_precondition",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The campaign cannot be sent in it's current state.",
                      "type": "string"
                    },
                    "preconditions": {
                      "description": "A list of codes to aid in handling the error programatically.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "subject.format",
                        "lists.length"
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/transactional-campaigns": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Transactional Campaigns"
        ],
        "summary": "List transactional campaigns",
        "description": "Retrieve transactional campaigns in a brand.",
        "operationId": "listTransactionalCampaigns",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to retrieve transactional campaigns from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactional campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListTransactionalCampaignsResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "name": "March 2022 Campaign",
                        "created": 1568654293,
                        "subject": "The January Newsletter",
                        "from": {
                          "email": "chris@bigmailer.io",
                          "name": "Chris"
                        },
                        "recipient_name": "*|FIRST_NAME|*",
                        "reply_to": {
                          "email": "chris@bigmailer.io",
                          "name": "Chris"
                        },
                        "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                        "preview": "Hurry, 50% Off for 2 Days Only!",
                        "track_opens": true,
                        "track_clicks": true,
                        "track_text_clicks": true,
                        "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "num_sent": 100,
                        "num_rejected": 10,
                        "num_clicks": 20,
                        "num_total_clicks": 30,
                        "num_opens": 50,
                        "num_total_opens": 60,
                        "num_hard_bounces": 4,
                        "num_soft_bounces": 8,
                        "num_complaints": 2,
                        "num_unsubscribes": 3,
                        "status": "draft"
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the campaign",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the campaign",
                            "example": "March 2022 Campaign",
                            "type": "string"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          },
                          "subject": {
                            "description": "Subject line for the campaign",
                            "example": "The January Newsletter",
                            "type": "string"
                          },
                          "from": {
                            "properties": {
                              "email": {
                                "description": "From email address",
                                "type": "string",
                                "format": "email"
                              },
                              "name": {
                                "description": "From name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "recipient_name": {
                            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                            "example": "*|FIRST_NAME|*",
                            "type": "string"
                          },
                          "reply_to": {
                            "properties": {
                              "email": {
                                "description": "Reply to email address",
                                "type": "string",
                                "format": "email"
                              },
                              "name": {
                                "description": "Reply to name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "link_params": {
                            "description": "Additional query string parameters to add to all links in the template.",
                            "example": "utm_campaign=spring_sale&utm_medium=cpc",
                            "type": "string"
                          },
                          "preview": {
                            "description": "Copy shown following your subject line in many email clients.",
                            "example": "Hurry, 50% Off for 2 Days Only!",
                            "type": "string"
                          },
                          "track_opens": {
                            "description": "True to enable open tracking (HTML campaigns only).",
                            "example": true,
                            "type": "boolean"
                          },
                          "track_clicks": {
                            "description": "True to enable click tracking in HTML links.",
                            "example": true,
                            "type": "boolean"
                          },
                          "track_text_clicks": {
                            "description": "True to enable click tracking in text links.",
                            "example": true,
                            "type": "boolean"
                          },
                          "message_type_id": {
                            "description": "ID of the message type of the campaign.",
                            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                            "type": "string",
                            "format": "uuid"
                          },
                          "list_id": {
                            "description": "ID of a list contacts sent the transactional campaign should be added to.",
                            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                            "type": "string",
                            "format": "uuid"
                          },
                          "num_sent": {
                            "description": "Number of emails sent.",
                            "example": 100,
                            "type": "integer"
                          },
                          "num_rejected": {
                            "description": "Number of emails rejected.",
                            "example": 10,
                            "type": "integer"
                          },
                          "num_clicks": {
                            "description": "Number of unique clicks.",
                            "example": 20,
                            "type": "integer"
                          },
                          "num_total_clicks": {
                            "description": "Number of total clicks (non-unique).",
                            "example": 30,
                            "type": "integer"
                          },
                          "num_opens": {
                            "description": "Number of unique opens.",
                            "example": 50,
                            "type": "integer"
                          },
                          "num_total_opens": {
                            "description": "Number of total opens (non-unique).",
                            "example": 60,
                            "type": "integer"
                          },
                          "num_hard_bounces": {
                            "description": "Number of emails sent that hard bounced.",
                            "example": 4,
                            "type": "integer"
                          },
                          "num_soft_bounces": {
                            "description": "Number of emails sent that soft bounced.",
                            "example": 8,
                            "type": "integer"
                          },
                          "num_complaints": {
                            "description": "Number of emails sent that complained.",
                            "example": 2,
                            "type": "integer"
                          },
                          "num_unsubscribes": {
                            "description": "Number of emails sent that unsubscribed.",
                            "example": 3,
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status of the campaign.",
                            "example": "draft",
                            "type": "string",
                            "enum": [
                              "draft",
                              "pending",
                              "in progress",
                              "complete",
                              "error",
                              "paused",
                              "archived",
                              "active"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Transactional Campaigns"
        ],
        "summary": "Create a transactional campaign",
        "description": "Create a transactional campaign.",
        "operationId": "createTransactionalCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to create a campaign in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateTransactionalCampaignPayload",
                "example": {
                  "name": "March 2022 Campaign",
                  "subject": "The January Newsletter",
                  "from": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "recipient_name": "*|FIRST_NAME|*",
                  "reply_to": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                  "preview": "Hurry, 50% Off for 2 Days Only!",
                  "html": "<p>This is the html body.</p>",
                  "text": "This is the text body.",
                  "track_opens": true,
                  "track_clicks": true,
                  "track_text_clicks": true,
                  "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "ready": true
                },
                "properties": {
                  "name": {
                    "description": "Name of the campaign",
                    "example": "March 2022 Campaign",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject line for the campaign",
                    "example": "The January Newsletter",
                    "type": "string"
                  },
                  "from": {
                    "properties": {
                      "email": {
                        "description": "From email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "From name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "recipient_name": {
                    "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                    "example": "*|FIRST_NAME|*",
                    "type": "string"
                  },
                  "reply_to": {
                    "properties": {
                      "email": {
                        "description": "Reply to email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "Reply to name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "link_params": {
                    "description": "Additional query string parameters to add to all links in the template.",
                    "example": "utm_campaign=spring_sale&utm_medium=cpc",
                    "type": "string"
                  },
                  "preview": {
                    "description": "Copy shown following your subject line in many email clients.",
                    "example": "Hurry, 50% Off for 2 Days Only!",
                    "type": "string"
                  },
                  "html": {
                    "description": "HTML body of the email.",
                    "example": "<p>This is the html body.</p>",
                    "type": "string"
                  },
                  "text": {
                    "description": "Text body of the email.",
                    "example": "This is the text body.",
                    "type": "string"
                  },
                  "track_opens": {
                    "description": "True to enable open tracking (HTML campaigns only).",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_clicks": {
                    "description": "True to enable click tracking in HTML links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_text_clicks": {
                    "description": "True to enable click tracking in text links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "message_type_id": {
                    "description": "ID of the message type of the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "list_id": {
                    "description": "ID of a list contacts sent the transactional campaign should be added to.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "ready": {
                    "description": "Set to true to activate the campaign. The campaign cannot be sent until activated by setting ready to true.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The transactional campaign was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateTransactionalCampaignResult",
                  "description": "Result of creating a transactional campaign",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the transactional campaign created.",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "The campaign cannot be sent in it's current state. See https://docs.bigmailer.io/docs/campaign-api-precondition-codes for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Precondition failed error",
                  "description": "The operation was rejected because the system is not in a state required for the operation's execution.",
                  "example": {
                    "type": "failed_precondition",
                    "message": "The campaign cannot be sent in it's current state.",
                    "preconditions": [
                      "subject.format",
                      "lists.length"
                    ]
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "failed_precondition",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The campaign cannot be sent in it's current state.",
                      "type": "string"
                    },
                    "preconditions": {
                      "description": "A list of codes to aid in handling the error programatically.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "subject.format",
                        "lists.length"
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/transactional-campaigns/{campaign_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Transactional Campaigns"
        ],
        "summary": "Get transactional campaign",
        "description": "Get a transactional campaign.",
        "operationId": "getTransactionalCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "campaign_id",
            "required": true,
            "description": "ID of the campaign",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetTransactionalCampaignResult",
                  "description": "Result of getting a transactional campaign",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "name": "March 2022 Campaign",
                    "created": 1568654293,
                    "subject": "The January Newsletter",
                    "from": {
                      "email": "chris@bigmailer.io",
                      "name": "Chris"
                    },
                    "recipient_name": "*|FIRST_NAME|*",
                    "reply_to": {
                      "email": "chris@bigmailer.io",
                      "name": "Chris"
                    },
                    "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                    "preview": "Hurry, 50% Off for 2 Days Only!",
                    "html": "<p>This is the html body.</p>",
                    "text": "This is the text body.",
                    "track_opens": true,
                    "track_clicks": true,
                    "track_text_clicks": true,
                    "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "num_sent": 100,
                    "num_rejected": 10,
                    "num_clicks": 20,
                    "num_total_clicks": 30,
                    "num_opens": 50,
                    "num_total_opens": 60,
                    "num_hard_bounces": 4,
                    "num_soft_bounces": 8,
                    "num_complaints": 2,
                    "num_unsubscribes": 3,
                    "status": "draft"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the campaign",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the campaign",
                      "example": "March 2022 Campaign",
                      "type": "string"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    },
                    "subject": {
                      "description": "Subject line for the campaign",
                      "example": "The January Newsletter",
                      "type": "string"
                    },
                    "from": {
                      "properties": {
                        "email": {
                          "description": "From email address",
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "description": "From name",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "recipient_name": {
                      "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                      "example": "*|FIRST_NAME|*",
                      "type": "string"
                    },
                    "reply_to": {
                      "properties": {
                        "email": {
                          "description": "Reply to email address",
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "description": "Reply to name",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "link_params": {
                      "description": "Additional query string parameters to add to all links in the template.",
                      "example": "utm_campaign=spring_sale&utm_medium=cpc",
                      "type": "string"
                    },
                    "preview": {
                      "description": "Copy shown following your subject line in many email clients.",
                      "example": "Hurry, 50% Off for 2 Days Only!",
                      "type": "string"
                    },
                    "html": {
                      "description": "HTML body of the email.",
                      "example": "<p>This is the html body.</p>",
                      "type": "string"
                    },
                    "text": {
                      "description": "Text body of the email.",
                      "example": "This is the text body.",
                      "type": "string"
                    },
                    "track_opens": {
                      "description": "True to enable open tracking (HTML campaigns only).",
                      "example": true,
                      "type": "boolean"
                    },
                    "track_clicks": {
                      "description": "True to enable click tracking in HTML links.",
                      "example": true,
                      "type": "boolean"
                    },
                    "track_text_clicks": {
                      "description": "True to enable click tracking in text links.",
                      "example": true,
                      "type": "boolean"
                    },
                    "message_type_id": {
                      "description": "ID of the message type of the campaign.",
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "type": "string",
                      "format": "uuid"
                    },
                    "list_id": {
                      "description": "ID of a list contacts sent the transactional campaign should be added to.",
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "type": "string",
                      "format": "uuid"
                    },
                    "num_sent": {
                      "description": "Number of emails sent.",
                      "example": 100,
                      "type": "integer"
                    },
                    "num_rejected": {
                      "description": "Number of emails rejected.",
                      "example": 10,
                      "type": "integer"
                    },
                    "num_clicks": {
                      "description": "Number of unique clicks.",
                      "example": 20,
                      "type": "integer"
                    },
                    "num_total_clicks": {
                      "description": "Number of total clicks (non-unique).",
                      "example": 30,
                      "type": "integer"
                    },
                    "num_opens": {
                      "description": "Number of unique opens.",
                      "example": 50,
                      "type": "integer"
                    },
                    "num_total_opens": {
                      "description": "Number of total opens (non-unique).",
                      "example": 60,
                      "type": "integer"
                    },
                    "num_hard_bounces": {
                      "description": "Number of emails sent that hard bounced.",
                      "example": 4,
                      "type": "integer"
                    },
                    "num_soft_bounces": {
                      "description": "Number of emails sent that soft bounced.",
                      "example": 8,
                      "type": "integer"
                    },
                    "num_complaints": {
                      "description": "Number of emails sent that complained.",
                      "example": 2,
                      "type": "integer"
                    },
                    "num_unsubscribes": {
                      "description": "Number of emails sent that unsubscribed.",
                      "example": 3,
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the campaign.",
                      "example": "draft",
                      "type": "string",
                      "enum": [
                        "draft",
                        "pending",
                        "in progress",
                        "complete",
                        "error",
                        "paused",
                        "archived",
                        "active"
                      ]
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Campaign does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Transactional Campaigns"
        ],
        "summary": "Update a transactional campaign",
        "description": "Update a transactional campaign.",
        "operationId": "updateTransactionalCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "ID of the brand to update a campaign in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "campaign_id",
            "required": true,
            "description": "ID of the campaign",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateTransactionalCampaignPayload",
                "example": {
                  "name": "March 2022 Campaign",
                  "subject": "The January Newsletter",
                  "from": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "recipient_name": "*|FIRST_NAME|*",
                  "reply_to": {
                    "email": "chris@bigmailer.io",
                    "name": "Chris"
                  },
                  "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
                  "preview": "Hurry, 50% Off for 2 Days Only!",
                  "html": "<p>This is the html body.</p>",
                  "text": "This is the text body.",
                  "track_opens": true,
                  "track_clicks": true,
                  "track_text_clicks": true,
                  "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "ready": true
                },
                "properties": {
                  "name": {
                    "description": "Name of the campaign",
                    "example": "March 2022 Campaign",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject line for the campaign",
                    "example": "The January Newsletter",
                    "type": "string"
                  },
                  "from": {
                    "properties": {
                      "email": {
                        "description": "From email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "From name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "recipient_name": {
                    "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                    "example": "*|FIRST_NAME|*",
                    "type": "string"
                  },
                  "reply_to": {
                    "properties": {
                      "email": {
                        "description": "Reply to email address",
                        "type": "string",
                        "format": "email"
                      },
                      "name": {
                        "description": "Reply to name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "link_params": {
                    "description": "Additional query string parameters to add to all links in the template.",
                    "example": "utm_campaign=spring_sale&utm_medium=cpc",
                    "type": "string"
                  },
                  "preview": {
                    "description": "Copy shown following your subject line in many email clients.",
                    "example": "Hurry, 50% Off for 2 Days Only!",
                    "type": "string"
                  },
                  "html": {
                    "description": "HTML body of the email.",
                    "example": "<p>This is the html body.</p>",
                    "type": "string"
                  },
                  "text": {
                    "description": "Text body of the email.",
                    "example": "This is the text body.",
                    "type": "string"
                  },
                  "track_opens": {
                    "description": "True to enable open tracking (HTML campaigns only).",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_clicks": {
                    "description": "True to enable click tracking in HTML links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "track_text_clicks": {
                    "description": "True to enable click tracking in text links.",
                    "example": true,
                    "type": "boolean"
                  },
                  "message_type_id": {
                    "description": "ID of the message type of the campaign.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "list_id": {
                    "description": "ID of a list contacts sent the transactional campaign should be added to.",
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "type": "string",
                    "format": "uuid"
                  },
                  "ready": {
                    "description": "Set to true to activate the campaign. The campaign cannot be sent until activated by setting ready to true.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The transactional campaign was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateTransactionalCampaignResult",
                  "description": "Result of updating a transactional campaign",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the transactional campaign updated.",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Campaign does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "The campaign cannot be sent in it's current state. See https://docs.bigmailer.io/docs/campaign-api-precondition-codes for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Precondition failed error",
                  "description": "The operation was rejected because the system is not in a state required for the operation's execution.",
                  "example": {
                    "type": "failed_precondition",
                    "message": "The campaign cannot be sent in it's current state.",
                    "preconditions": [
                      "subject.format",
                      "lists.length"
                    ]
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "failed_precondition",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The campaign cannot be sent in it's current state.",
                      "type": "string"
                    },
                    "preconditions": {
                      "description": "A list of codes to aid in handling the error programatically.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "subject.format",
                        "lists.length"
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{brand_id}/transactional-campaigns/{campaign_id}/send": {
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Transactional Campaigns"
        ],
        "summary": "Send a transactional email",
        "description": "Send an email as part of a transactional campaign.",
        "operationId": "sendTransactionalCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "brand_id",
            "required": true,
            "description": "Id of the brand the campaign is part of",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "campaign_id",
            "required": true,
            "description": "ID of the campaign",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SendTransactionalCampaignPayload",
                "example": {
                  "email": "chris@bigmailer.io",
                  "field_values": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "variables": [
                    {
                      "name": "COMPANY",
                      "value": "Widgets, LTD."
                    },
                    {
                      "name": "ADDRESS",
                      "value": "123 Main Street"
                    }
                  ]
                },
                "properties": {
                  "email": {
                    "description": "Email address of the contact",
                    "example": "chris@bigmailer.io",
                    "format": "email",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "field_values": {
                    "description": "Field values are saved along with the email as part of the contact. Additionally, they are used as variables when generating the email content (body, subject, and recipient name).\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
                    "example": [
                      {
                        "name": "FIRST NAME",
                        "string": "Christopher"
                      },
                      {
                        "name": "BIRTHDAY",
                        "date": "1981-12-04"
                      },
                      {
                        "name": "EMPLOYEE ID",
                        "integer": 12345
                      }
                    ],
                    "items": {
                      "title": "FieldValuePayload",
                      "example": {
                        "name": "MEMBER ID",
                        "integer": 12345
                      },
                      "properties": {
                        "date": {
                          "example": "2019-11-27",
                          "format": "date",
                          "type": "string"
                        },
                        "integer": {
                          "example": 4995590933000642000,
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "FIRST NAME",
                          "type": "string"
                        },
                        "string": {
                          "example": "Christopher",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "variables": {
                    "description": "Variables to substitute into the email content (body, subject, and recipient name). Unlike field_values, they are **NOT** saved as part of the contact.",
                    "example": [
                      {
                        "name": "COMPANY",
                        "value": "Widgets, LTD."
                      },
                      {
                        "name": "ADDRESS",
                        "value": "123 Main Street"
                      }
                    ],
                    "items": {
                      "title": "VariablePayload",
                      "example": {
                        "name": "FIRST NAME",
                        "value": "Christopher"
                      },
                      "properties": {
                        "name": {
                          "example": "FIRST NAME",
                          "type": "string"
                        },
                        "value": {
                          "example": "Christopher",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SendTransactionalCampaignResult",
                  "description": "Result of sending a transactional email",
                  "example": {
                    "contact_id": "38323da7-f824-4ada-8fcd-cd48a2f51fcf"
                  },
                  "properties": {
                    "contact_id": {
                      "description": "ID of the contact inserted or updated",
                      "example": "38323da7-f824-4ada-8fcd-cd48a2f51fcf",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Campaign does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "List users",
        "description": "Retrieve users.",
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned, between 1 and 100.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListUsersResult",
                  "example": {
                    "has_more": false,
                    "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
                    "data": [
                      {
                        "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                        "role": "brand_manager",
                        "email": "chris@bigmailer.io",
                        "is_owner": true,
                        "is_activated": true,
                        "allowed_brands": [
                          "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                        ],
                        "activated": 1568654394,
                        "created": 1568654293
                      }
                    ]
                  },
                  "properties": {
                    "has_more": {
                      "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
                      "example": true,
                      "type": "boolean"
                    },
                    "cursor": {
                      "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
                      "example": "K5pwIGH3hgYrhytbDUY5eQ==",
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID of the user",
                            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "role": {
                            "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
                            "example": "brand_manager",
                            "type": "string",
                            "enum": [
                              "admin",
                              "account_manager",
                              "brand_manager",
                              "campaign_manager",
                              "template_manager"
                            ]
                          },
                          "email": {
                            "description": "User's email address",
                            "example": "chris@bigmailer.io",
                            "type": "string",
                            "format": "email"
                          },
                          "is_owner": {
                            "description": "true if the user is the account owner. An account owner cannot be deleted.",
                            "example": true,
                            "type": "boolean"
                          },
                          "is_activated": {
                            "description": "true if the user is activated. A user becomes activated by clicking the link in the invitation email.",
                            "example": true,
                            "type": "boolean"
                          },
                          "allowed_brands": {
                            "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
                            "example": [
                              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                            ],
                            "items": {
                              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "activated": {
                            "description": "Time at which the user was activated. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          },
                          "created": {
                            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                            "example": 1592422352,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateUserPayload",
                "example": {
                  "role": "brand_manager",
                  "email": "chris@bigmailer.io",
                  "allowed_brands": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "invitation_message": "Please join our account."
                },
                "properties": {
                  "role": {
                    "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
                    "example": "brand_manager",
                    "type": "string",
                    "enum": [
                      "admin",
                      "account_manager",
                      "brand_manager",
                      "campaign_manager",
                      "template_manager"
                    ]
                  },
                  "email": {
                    "description": "User's email address",
                    "example": "chris@bigmailer.io",
                    "type": "string",
                    "format": "email"
                  },
                  "allowed_brands": {
                    "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invitation_message": {
                    "description": "A message to include in the invitation email.",
                    "example": "Please join our account.",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "role"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateUserResult",
                  "description": "Result of creating a user",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the user inserted",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "User already exists with email",
            "content": {
              "application/json": {
                "schema": {
                  "title": "User Exists Error",
                  "description": "The user already exists.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "User already exists with this email.",
                    "param": "email",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "User already exists with this email.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}": {
      "get": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user",
        "description": "Get a user.",
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "ID of the user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieval was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetUserResult",
                  "description": "Result of getting a user",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                    "role": "brand_manager",
                    "email": "chris@bigmailer.io",
                    "is_owner": true,
                    "is_activated": true,
                    "allowed_brands": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "activated": 1568654394,
                    "created": 1568654293
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the user",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "role": {
                      "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
                      "example": "brand_manager",
                      "type": "string",
                      "enum": [
                        "admin",
                        "account_manager",
                        "brand_manager",
                        "campaign_manager",
                        "template_manager"
                      ]
                    },
                    "email": {
                      "description": "User's email address",
                      "example": "chris@bigmailer.io",
                      "type": "string",
                      "format": "email"
                    },
                    "is_owner": {
                      "description": "true if the user is the account owner. An account owner cannot be deleted.",
                      "example": true,
                      "type": "boolean"
                    },
                    "is_activated": {
                      "description": "true if the user is activated. A user becomes activated by clicking the link in the invitation email.",
                      "example": true,
                      "type": "boolean"
                    },
                    "allowed_brands": {
                      "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
                      "example": [
                        "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                      ],
                      "items": {
                        "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "activated": {
                      "description": "Time at which the user was activated. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    },
                    "created": {
                      "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                      "example": 1592422352,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update a user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "ID of the user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateUserPayload",
                "example": {
                  "role": "brand_manager",
                  "email": "chris@bigmailer.io",
                  "allowed_brands": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ]
                },
                "properties": {
                  "role": {
                    "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
                    "example": "brand_manager",
                    "type": "string",
                    "enum": [
                      "admin",
                      "account_manager",
                      "brand_manager",
                      "campaign_manager",
                      "template_manager"
                    ]
                  },
                  "email": {
                    "description": "User's email address",
                    "example": "chris@bigmailer.io",
                    "type": "string",
                    "format": "email"
                  },
                  "allowed_brands": {
                    "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
                    "example": [
                      "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                    ],
                    "items": {
                      "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateUserResult",
                  "description": "Result of updating a user",
                  "example": {
                    "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the user updated",
                      "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "User already exists with email",
            "content": {
              "application/json": {
                "schema": {
                  "title": "User Exists Error",
                  "description": "The user already exists.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "User already exists with this email.",
                    "param": "email",
                    "code": "resource_already_exists"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "User already exists with this email.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_already_exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete a user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "ID of the user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteUserResult",
                  "description": "Result of deleting a user",
                  "example": {
                    "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
                  },
                  "properties": {
                    "id": {
                      "description": "ID of the user deleted",
                      "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidRequestError",
                  "description": "Object containing error information.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Email address is invalid.",
                    "param": "email",
                    "code": "invalid_format"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Email address is invalid.",
                      "type": "string"
                    },
                    "param": {
                      "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                      "example": "email",
                      "type": "string"
                    },
                    "code": {
                      "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
                      "example": "invalid_format",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "The API key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Unauthorized Error",
                  "description": "The API key does not exist.",
                  "example": {
                    "type": "authentication_error",
                    "message": "Unknown API key"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "authentication_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Unknown API key",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "The system understands the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Forbidden Error",
                  "description": "The system understands the request but refuses to authorize it.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "The API is only accessible over HTTPS."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "The API is only accessible over HTTPS.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Resource Missing Error",
                  "description": "A requested resource does not exist.",
                  "example": {
                    "type": "invalid_request_error",
                    "message": "Item does not exist in this brand.",
                    "param": "brand_id",
                    "code": "resource_missing"
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "invalid_request_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Item does not exist in this brand.",
                      "type": "string"
                    },
                    "param": {
                      "description": "The parameter related to the error.",
                      "example": "brand_id",
                      "type": "string"
                    },
                    "code": {
                      "description": "Code to aid in handling the error programatically.",
                      "example": "resource_missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "429": {
            "description": "The client has made too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Too Many Requests Error",
                  "description": "The client has made too many requests.",
                  "example": {
                    "type": "rate_limit_error",
                    "message": "API request limit has been exceeded."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "rate_limit_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "API request limit has been exceeded.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "502": {
            "description": "The system is under heavy load or is down temporarily.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The system is under maintenance. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Under maintenance error",
                  "description": "The system is under maintenance. Please try again later.",
                  "example": {
                    "type": "server_error",
                    "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "server_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "The system timed out processing your request.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Server Error",
                  "description": "The server encountered an unexpected error.",
                  "example": {
                    "type": "api_error",
                    "message": "An unexpected error occurred."
                  },
                  "properties": {
                    "type": {
                      "description": "The type of error returned.",
                      "example": "api_error",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error.",
                      "example": "An unexpected error occurred.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-api-id": "bigmailer-api-v1",
  "info": {
    "contact": {
      "email": "chris@bigmailer.io",
      "name": "Christopher Utz"
    },
    "description": "An API to interact with the BigMailer platform.",
    "title": "BigMailer API",
    "version": "1.0.0"
  },
  "x-samples-languages": [
    "curl",
    "node",
    "ruby",
    "javascript",
    "python",
    "php"
  ],
  "servers": [
    {
      "url": "https://api.bigmailer.io"
    }
  ],
  "components": {
    "responses": {
      "InternalServerError": {
        "description": "Internal Server Error"
      }
    },
    "requestBodies": {
      "CreateContactPayload": {
        "content": {
          "application/json": {
            "schema": {
              "title": "CreateContactPayload",
              "example": {
                "email": "chris@bigmailer.io",
                "field_values": [
                  {
                    "name": "FIRST NAME",
                    "string": "Christopher"
                  },
                  {
                    "name": "BIRTHDAY",
                    "date": "1981-12-04"
                  },
                  {
                    "name": "EMPLOYEE ID",
                    "integer": 12345
                  }
                ],
                "list_ids": [
                  "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                ],
                "unsubscribe_all": true,
                "unsubscribe_ids": [
                  "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                ]
              },
              "properties": {
                "email": {
                  "description": "Email address of the contact",
                  "example": "chris@bigmailer.io",
                  "format": "email",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "field_values": {
                  "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
                  "example": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "items": {
                    "title": "FieldValuePayload",
                    "example": {
                      "name": "MEMBER ID",
                      "integer": 12345
                    },
                    "properties": {
                      "date": {
                        "example": "2019-11-27",
                        "format": "date",
                        "type": "string"
                      },
                      "integer": {
                        "example": 4995590933000642000,
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "FIRST NAME",
                        "type": "string"
                      },
                      "string": {
                        "example": "Christopher",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "list_ids": {
                  "description": "IDs of lists the contact should be added to",
                  "example": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "items": {
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "unsubscribe_all": {
                  "default": false,
                  "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
                  "example": true,
                  "type": "boolean"
                },
                "unsubscribe_ids": {
                  "description": "IDs of message types the contact should be unsubscribed from.",
                  "example": [
                    "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                  ],
                  "items": {
                    "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "APIKey": {
        "description": "API Key",
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      }
    },
    "schemas": {
      "ListBrandsResult": {
        "title": "ListBrandsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "My Company Ltd",
              "from_name": "Christopher",
              "from_email": "chris@example.com",
              "filter_soft_bounces": true,
              "max_soft_bounces": 5,
              "bounce_danger_percent": 15,
              "unsubscribe_text": "Sorry to see you go!",
              "connection_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
              "contact_limit": 50000,
              "url": "http://www.example.com/",
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the brand",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the brand",
                  "example": "My Company Ltd",
                  "type": "string"
                },
                "from_name": {
                  "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
                  "example": "Christopher",
                  "type": "string"
                },
                "from_email": {
                  "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
                  "example": "chris@example.com",
                  "format": "email",
                  "type": "string"
                },
                "filter_soft_bounces": {
                  "description": "true if campaigns sent from this brand should exclude contacts with more than `max_soft_bounces` soft bounces, false otherwise.",
                  "example": true,
                  "type": "boolean"
                },
                "max_soft_bounces": {
                  "description": "if filter_soft_bounces is true, the maximum number of times a contact can soft bounce before it is considered undeliverable.",
                  "example": 5,
                  "type": "integer"
                },
                "bounce_danger_percent": {
                  "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
                  "example": 15,
                  "type": "integer"
                },
                "unsubscribe_text": {
                  "description": "A message displayed to contacts on the brand unsubscribe page.",
                  "example": "Sorry to see you go!",
                  "type": "string"
                },
                "connection_id": {
                  "description": "ID of the connection used to send emails",
                  "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                  "format": "uuid",
                  "type": "string"
                },
                "contact_limit": {
                  "description": "The maxmimum number of contacts the brand is allowed to contain.",
                  "example": 50000,
                  "type": "integer"
                },
                "url": {
                  "description": "URL of a website associated with the brand",
                  "example": "http://www.example.com/",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "CreateBrandPayload": {
        "title": "CreateBrandPayload",
        "example": {
          "name": "BigMailer Co",
          "from_name": "Chris",
          "from_email": "chris@bigmailer.io",
          "bounce_danger_percent": 15,
          "max_soft_bounces": 5,
          "url": "https://www.bigmailer.io/",
          "unsubscribe_text": "Please don't unsubscribe.",
          "contact_limit": 50000,
          "logo": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
          "connection_id": "562f699c-dbd0-4047-907c-218a2b482220"
        },
        "properties": {
          "name": {
            "description": "Name of the brand",
            "example": "BigMailer Co",
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "from_name": {
            "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
            "example": "Chris",
            "type": "string"
          },
          "from_email": {
            "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
            "example": "chris@bigmailer.io",
            "type": "string",
            "format": "email"
          },
          "bounce_danger_percent": {
            "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
            "example": 15,
            "type": "integer",
            "minimum": 1,
            "maximum": 15,
            "default": 8
          },
          "max_soft_bounces": {
            "description": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
            "example": 5,
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "default": 12
          },
          "url": {
            "description": "URL of a website associated with the brand",
            "example": "https://www.bigmailer.io/",
            "type": "string",
            "format": "url"
          },
          "unsubscribe_text": {
            "description": "A message displayed to contacts on the brand unsubscribe page.",
            "example": "Sorry to see you go!",
            "type": "string"
          },
          "contact_limit": {
            "description": "The maxmimum number of contacts the brand is allowed to contain.",
            "example": 50000,
            "type": "integer",
            "minimum": 0,
            "maximum": 1000000000,
            "multipleOf": 1000
          },
          "logo": {
            "description": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
            "example": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
            "type": "string",
            "format": "byte"
          },
          "connection_id": {
            "description": "ID of the connection used to send emails",
            "example": "562f699c-dbd0-4047-907c-218a2b482220",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "from_name",
          "from_email"
        ],
        "type": "object"
      },
      "CreateBrandResult": {
        "title": "CreateBrandResult",
        "description": "Result of creating a brand",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the brand inserted",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetBrandResult": {
        "title": "GetBrandResult",
        "description": "Result of getting a brand",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "My Company Ltd",
          "from_name": "Christopher",
          "from_email": "chris@example.com",
          "filter_soft_bounces": true,
          "max_soft_bounces": 5,
          "bounce_danger_percent": 15,
          "unsubscribe_text": "Sorry to see you go!",
          "connection_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
          "contact_limit": 50000,
          "url": "http://www.example.com/",
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the brand",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the brand",
            "example": "My Company Ltd",
            "type": "string"
          },
          "from_name": {
            "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
            "example": "Christopher",
            "type": "string"
          },
          "from_email": {
            "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
            "example": "chris@example.com",
            "format": "email",
            "type": "string"
          },
          "filter_soft_bounces": {
            "description": "true if campaigns sent from this brand should exclude contacts with more than `max_soft_bounces` soft bounces, false otherwise.",
            "example": true,
            "type": "boolean"
          },
          "max_soft_bounces": {
            "description": "if filter_soft_bounces is true, the maximum number of times a contact can soft bounce before it is considered undeliverable.",
            "example": 5,
            "type": "integer"
          },
          "bounce_danger_percent": {
            "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
            "example": 15,
            "type": "integer"
          },
          "unsubscribe_text": {
            "description": "A message displayed to contacts on the brand unsubscribe page.",
            "example": "Sorry to see you go!",
            "type": "string"
          },
          "connection_id": {
            "description": "ID of the connection used to send emails",
            "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
            "format": "uuid",
            "type": "string"
          },
          "contact_limit": {
            "description": "The maxmimum number of contacts the brand is allowed to contain.",
            "example": 50000,
            "type": "integer"
          },
          "url": {
            "description": "URL of a website associated with the brand",
            "example": "http://www.example.com/",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateBrandPayload": {
        "title": "UpdateBrandPayload",
        "example": {
          "name": "BigMailer Co",
          "from_name": "Chris",
          "from_email": "chris@bigmailer.io",
          "bounce_danger_percent": 15,
          "max_soft_bounces": 5,
          "url": "https://www.bigmailer.io/",
          "unsubscribe_text": "Please don't unsubscribe.",
          "contact_limit": 50000,
          "logo": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
          "connection_id": "562f699c-dbd0-4047-907c-218a2b482220"
        },
        "properties": {
          "name": {
            "description": "Name of the brand",
            "example": "BigMailer Co",
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "from_name": {
            "description": "Default name used in the \"From:\" header in campaigns sent from this brand.",
            "example": "Chris",
            "type": "string"
          },
          "from_email": {
            "description": "Default email used in the \"From:\" header in campaigns sent from this brand.",
            "example": "chris@bigmailer.io",
            "type": "string",
            "format": "email"
          },
          "bounce_danger_percent": {
            "description": "An integer percentage (0-100). If a bulk campaign in the brand reaches this threshold percent of bounces, it is paused automatically.",
            "example": 15,
            "type": "integer",
            "minimum": 1,
            "maximum": 15,
            "default": 8
          },
          "max_soft_bounces": {
            "description": "The maximum number of times a contact can soft bounce before it is considered undeliverable. Set to 0 to remove the limit on soft bounces.",
            "example": 5,
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "default": 12
          },
          "url": {
            "description": "URL of a website associated with the brand",
            "example": "https://www.bigmailer.io/",
            "type": "string",
            "format": "url"
          },
          "unsubscribe_text": {
            "description": "A message displayed to contacts on the brand unsubscribe page.",
            "example": "Sorry to see you go!",
            "type": "string"
          },
          "contact_limit": {
            "description": "The maxmimum number of contacts the brand is allowed to contain.",
            "example": 50000,
            "type": "integer",
            "minimum": 0,
            "maximum": 1000000000,
            "multipleOf": 1000
          },
          "logo": {
            "description": "A base64 encoded JPEG, PNG, or GIF image identified with the brand.",
            "example": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
            "type": "string",
            "format": "byte"
          },
          "connection_id": {
            "description": "ID of the connection used to send emails",
            "example": "562f699c-dbd0-4047-907c-218a2b482220",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "UpdateBrandResult": {
        "title": "UpdateBrandResult",
        "description": "Result of updating a brand",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the brand updated",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListConnectionsResult": {
        "title": "ListConnectionsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "type": "aws",
              "name": "AWS us-east-1",
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the connection",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "Service type of the connection.",
                  "example": "aws",
                  "enum": [
                    "aws",
                    "elastic_email",
                    "spark_post",
                    "green_arrow",
                    "pro"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the connection",
                  "example": "AWS us-east-1",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GetConnectionResult": {
        "title": "GetConnectionResult",
        "description": "Result of getting a connection",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "type": "aws",
          "name": "AWS us-east-1",
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the connection",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Service type of the connection.",
            "example": "aws",
            "enum": [
              "aws",
              "elastic_email",
              "spark_post",
              "green_arrow",
              "pro"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name of the connection",
            "example": "AWS us-east-1",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListContactsResult": {
        "title": "ListContactsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "total": 100,
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "brand_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
              "email": "chris@bigmailer.io",
              "field_values": [
                {
                  "name": "FIRST NAME",
                  "string": "Christopher"
                },
                {
                  "name": "BIRTHDAY",
                  "date": "1981-12-04"
                },
                {
                  "name": "EMPLOYEE ID",
                  "integer": 12345
                }
              ],
              "list_ids": [
                "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
              ],
              "unsubscribe_all": false,
              "unsubscribe_ids": [
                "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
              ],
              "num_soft_bounces": 0,
              "num_hard_bounces": 0,
              "num_complaints": 0,
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "total": {
            "description": "The total number of items in the brand or list.",
            "example": 100,
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the contact",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "brand_id": {
                  "description": "ID of the brand the contact is in",
                  "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
                  "format": "uuid",
                  "type": "string"
                },
                "email": {
                  "description": "Email address of the contact",
                  "example": "chris@bigmailer.io",
                  "format": "email",
                  "type": "string"
                },
                "field_values": {
                  "description": "Field values associated with the contact.\n",
                  "example": [
                    {
                      "name": "FIRST NAME",
                      "string": "Christopher"
                    },
                    {
                      "name": "BIRTHDAY",
                      "date": "1981-12-04"
                    },
                    {
                      "name": "EMPLOYEE ID",
                      "integer": 12345
                    }
                  ],
                  "items": {
                    "title": "FieldValuePayload",
                    "example": {
                      "name": "MEMBER ID",
                      "integer": 12345
                    },
                    "properties": {
                      "date": {
                        "example": "2019-11-27",
                        "format": "date",
                        "type": "string"
                      },
                      "integer": {
                        "example": 4995590933000642000,
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "FIRST NAME",
                        "type": "string"
                      },
                      "string": {
                        "example": "Christopher",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "list_ids": {
                  "description": "IDs of the lists the contact is part of.",
                  "example": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "items": {
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "unsubscribe_all": {
                  "description": "true if the contact has unsubscribed from all message types, false otherwise.",
                  "example": true,
                  "type": "boolean"
                },
                "unsubscribe_ids": {
                  "description": "IDs of message types the contact has unsubscribed from.",
                  "example": [
                    "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
                  ],
                  "items": {
                    "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "num_soft_bounces": {
                  "description": "Number of times a campaign sent to contact's email has soft bounced.",
                  "type": "integer",
                  "example": 0
                },
                "num_hard_bounces": {
                  "description": "Number of times a campaign sent to contact's email has hard bounced.",
                  "type": "integer",
                  "example": 0
                },
                "num_complaints": {
                  "description": "Number of times a campaign sent to contact's email has triggered a complaint.",
                  "type": "integer",
                  "example": 0
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "CreateContactPayload": {
        "title": "CreateContactPayload",
        "example": {
          "email": "chris@bigmailer.io",
          "field_values": [
            {
              "name": "FIRST NAME",
              "string": "Christopher"
            },
            {
              "name": "BIRTHDAY",
              "date": "1981-12-04"
            },
            {
              "name": "EMPLOYEE ID",
              "integer": 12345
            }
          ],
          "list_ids": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "unsubscribe_all": true,
          "unsubscribe_ids": [
            "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
          ]
        },
        "properties": {
          "email": {
            "description": "Email address of the contact",
            "example": "chris@bigmailer.io",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "field_values": {
            "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
            "example": [
              {
                "name": "FIRST NAME",
                "string": "Christopher"
              },
              {
                "name": "BIRTHDAY",
                "date": "1981-12-04"
              },
              {
                "name": "EMPLOYEE ID",
                "integer": 12345
              }
            ],
            "items": {
              "title": "FieldValuePayload",
              "example": {
                "name": "MEMBER ID",
                "integer": 12345
              },
              "properties": {
                "date": {
                  "example": "2019-11-27",
                  "format": "date",
                  "type": "string"
                },
                "integer": {
                  "example": 4995590933000642000,
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "example": "FIRST NAME",
                  "type": "string"
                },
                "string": {
                  "example": "Christopher",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "list_ids": {
            "description": "IDs of lists the contact should be added to",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "unsubscribe_all": {
            "default": false,
            "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
            "example": true,
            "type": "boolean"
          },
          "unsubscribe_ids": {
            "description": "IDs of message types the contact should be unsubscribed from.",
            "example": [
              "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
            ],
            "items": {
              "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "CreateContactResult": {
        "title": "CreateContactResult",
        "description": "Result of creating a contact",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the contact inserted",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateContactPayload": {
        "title": "UpdateContactPayload",
        "example": {
          "email": "chris@bigmailer.io",
          "field_values": [
            {
              "name": "FIRST NAME",
              "string": "Christopher"
            },
            {
              "name": "BIRTHDAY",
              "date": "1981-12-04"
            },
            {
              "name": "EMPLOYEE ID",
              "integer": 12345
            }
          ],
          "list_ids": [
            "42e0c094-7021-482e-a3a5-7d1479ff4687"
          ],
          "unsubscribe_all": true,
          "unsubscribe_ids": [
            "6cd48292-e792-4fa1-afeb-7f2918f1d35d"
          ]
        },
        "properties": {
          "email": {
            "description": "Email address of the contact",
            "example": "chris@bigmailer.io",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "field_values": {
            "description": "Field values are saved along with the email as part of the contact.\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
            "example": [
              {
                "name": "FIRST NAME",
                "string": "Christopher"
              },
              {
                "name": "BIRTHDAY",
                "date": "1981-12-04"
              },
              {
                "name": "EMPLOYEE ID",
                "integer": 12345
              }
            ],
            "items": {
              "title": "FieldValuePayload",
              "example": {
                "name": "MEMBER ID",
                "integer": 12345
              },
              "properties": {
                "date": {
                  "example": "2019-11-27",
                  "format": "date",
                  "type": "string"
                },
                "integer": {
                  "example": 4995590933000642000,
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "example": "FIRST NAME",
                  "type": "string"
                },
                "string": {
                  "example": "Christopher",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "list_ids": {
            "description": "IDs of lists the contact should be added to",
            "example": [
              "42e0c094-7021-482e-a3a5-7d1479ff4687"
            ],
            "items": {
              "example": "42e0c094-7021-482e-a3a5-7d1479ff4687",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "unsubscribe_all": {
            "description": "Set to true to unsubscribe the contact from all future campaigns, regardless of message type.",
            "example": true,
            "type": "boolean"
          },
          "unsubscribe_ids": {
            "description": "IDs of message types the contact should be unsubscribed from.",
            "example": [
              "6cd48292-e792-4fa1-afeb-7f2918f1d35d"
            ],
            "items": {
              "example": "6cd48292-e792-4fa1-afeb-7f2918f1d35d",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetContactResult": {
        "title": "GetContactResult",
        "description": "Result of getting a contact",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "brand_id": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
          "email": "chris@bigmailer.io",
          "field_values": [
            {
              "name": "FIRST NAME",
              "string": "Christopher"
            },
            {
              "name": "BIRTHDAY",
              "date": "1981-12-04"
            },
            {
              "name": "EMPLOYEE ID",
              "integer": 12345
            }
          ],
          "list_ids": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "unsubscribe_all": false,
          "unsubscribe_ids": [
            "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
          ],
          "num_soft_bounces": 0,
          "num_hard_bounces": 0,
          "num_complaints": 0,
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the contact",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "brand_id": {
            "description": "ID of the brand the contact is in",
            "example": "2aef2dd2-ab14-453a-aadc-01f3699ed85a",
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "description": "Email address of the contact",
            "example": "chris@bigmailer.io",
            "format": "email",
            "type": "string"
          },
          "field_values": {
            "description": "Field values associated with the contact.\n",
            "example": [
              {
                "name": "FIRST NAME",
                "string": "Christopher"
              },
              {
                "name": "BIRTHDAY",
                "date": "1981-12-04"
              },
              {
                "name": "EMPLOYEE ID",
                "integer": 12345
              }
            ],
            "items": {
              "title": "FieldValuePayload",
              "example": {
                "name": "MEMBER ID",
                "integer": 12345
              },
              "properties": {
                "date": {
                  "example": "2019-11-27",
                  "format": "date",
                  "type": "string"
                },
                "integer": {
                  "example": 4995590933000642000,
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "example": "FIRST NAME",
                  "type": "string"
                },
                "string": {
                  "example": "Christopher",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "list_ids": {
            "description": "IDs of the lists the contact is part of.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "unsubscribe_all": {
            "description": "true if the contact has unsubscribed from all message types, false otherwise.",
            "example": true,
            "type": "boolean"
          },
          "unsubscribe_ids": {
            "description": "IDs of message types the contact has unsubscribed from.",
            "example": [
              "23f4c393-7556-4317-a38e-e0b0e60e6c8a"
            ],
            "items": {
              "example": "23f4c393-7556-4317-a38e-e0b0e60e6c8a",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "num_soft_bounces": {
            "description": "Number of times a campaign sent to contact's email has soft bounced.",
            "type": "integer",
            "example": 0
          },
          "num_hard_bounces": {
            "description": "Number of times a campaign sent to contact's email has hard bounced.",
            "type": "integer",
            "example": 0
          },
          "num_complaints": {
            "description": "Number of times a campaign sent to contact's email has triggered a complaint.",
            "type": "integer",
            "example": 0
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateContactResult": {
        "title": "UpdateContactResult",
        "description": "Result of updating a contact",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
        },
        "properties": {
          "id": {
            "description": "ID of the contact updated",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteContactResult": {
        "title": "DeleteContactResult",
        "description": "Result of deleting a contact",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
        },
        "properties": {
          "id": {
            "description": "ID of the contact deleted",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListListsResult": {
        "title": "ListListsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "High Engagement Contacts",
              "all": false,
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the list",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the list",
                  "example": "High Engagement Contacts",
                  "type": "string"
                },
                "all": {
                  "description": "true if this list is the special system created list containing all contacts within a brand, false otherwise.",
                  "example": false,
                  "type": "boolean"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "CreateListPayload": {
        "title": "CreateListPayload",
        "example": {
          "name": "High Engagement Contacts"
        },
        "properties": {
          "name": {
            "description": "Name of the list",
            "example": "High Engagement Contacts",
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateListResult": {
        "title": "CreateListResult",
        "description": "Result of creating a list",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the list inserted",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetListResult": {
        "title": "GetListResult",
        "description": "Result of getting a list",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "High Engagement Contacts",
          "all": false,
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the list",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the list",
            "example": "High Engagement Contacts",
            "type": "string"
          },
          "all": {
            "description": "true if this list is the special system created list containing all contacts within a brand, false otherwise.",
            "example": false,
            "type": "boolean"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateListPayload": {
        "title": "UpdateListPayload",
        "example": {
          "name": "High Engagement Contacts"
        },
        "properties": {
          "name": {
            "description": "Name of the list",
            "example": "High Engagement Contacts",
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "type": "object"
      },
      "UpdateListResult": {
        "title": "UpdateListResult",
        "description": "Result of updating a list",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the list updated",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteListResult": {
        "title": "DeleteListResult",
        "description": "Result of deleting a list",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
        },
        "properties": {
          "id": {
            "description": "ID of the list deleted",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateFieldPayload": {
        "title": "CreateFieldPayload",
        "example": {
          "name": "First Name",
          "merge_tag_name": "FIRST_NAME",
          "sample_value": "Christopher",
          "type": "text"
        },
        "properties": {
          "name": {
            "description": "Name of the field",
            "example": "First Name",
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^\\s*\\S.*$"
          },
          "merge_tag_name": {
            "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
            "example": "FIRST_NAME",
            "type": "string",
            "maxLength": 50,
            "pattern": "^\\s*\\S.*$"
          },
          "sample_value": {
            "description": "A value used for the field when sending test campaigns.",
            "example": "Christopher",
            "type": "string",
            "maxLength": 50
          },
          "type": {
            "description": "Type of the field",
            "example": "text",
            "type": "string",
            "enum": [
              "date",
              "integer",
              "text"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "CreateFieldResult": {
        "title": "CreateFieldResult",
        "description": "Result of creating a field",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the field created",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetFieldResult": {
        "title": "GetFieldResult",
        "description": "Result of getting a field",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "First Name",
          "type": "text",
          "merge_tag_name": "FIRST_NAME",
          "sample_value": "Christopher",
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the field",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the field",
            "example": "First Name",
            "type": "string"
          },
          "type": {
            "description": "Data type of the field.",
            "example": "text",
            "type": "string",
            "enum": [
              "date",
              "email",
              "integer",
              "text"
            ]
          },
          "merge_tag_name": {
            "description": "Name used to reference a field's value via a template or the API. For example, if merge_tag_name is FIRST_NAME, the field can be referenced using `*|FIRST_NAME|*` in a template or `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
            "example": "FIRST_NAME",
            "type": "string"
          },
          "sample_value": {
            "description": "A value used for the field when sending test campaigns.",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateFieldPayload": {
        "title": "CreateFieldPayload",
        "example": {
          "name": "First Name",
          "merge_tag_name": "FIRST_NAME",
          "sample_value": "Christopher"
        },
        "properties": {
          "name": {
            "description": "Name of the field",
            "example": "First Name",
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^\\s*\\S.*$"
          },
          "merge_tag_name": {
            "description": "Name used to reference a field's value via a template or the API.  For example, if merge_tag_name is FIRST_NAME, the field can be  referenced using `*|FIRST_NAME|*` in a template or  `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
            "example": "FIRST_NAME",
            "type": "string",
            "maxLength": 50,
            "pattern": "^\\s*\\S.*$"
          },
          "sample_value": {
            "description": "A value used for the field when sending test campaigns.",
            "example": "Christopher",
            "type": "string",
            "maxLength": 50
          }
        },
        "type": "object"
      },
      "UpdateFieldResult": {
        "title": "UpdateFieldResult",
        "description": "Result of updating a field",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the field updated",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListFieldsResult": {
        "title": "ListFieldsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "First Name",
              "type": "text",
              "merge_tag_name": "FIRST_NAME",
              "sample_value": "Christopher",
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the field",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the field",
                  "example": "First Name",
                  "type": "string"
                },
                "type": {
                  "description": "Data type of the field.",
                  "example": "text",
                  "type": "string",
                  "enum": [
                    "date",
                    "email",
                    "integer",
                    "text"
                  ]
                },
                "merge_tag_name": {
                  "description": "Name used to reference a field's value via a template or the API. For example, if merge_tag_name is FIRST_NAME, the field can be referenced using `*|FIRST_NAME|*` in a template or `{\"name\": \"FIRST_NAME\", \"string\": \"\"}` via the API.\n",
                  "example": "FIRST_NAME",
                  "type": "string"
                },
                "sample_value": {
                  "description": "A value used for the field when sending test campaigns.",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "DeleteFieldResult": {
        "title": "DeleteFieldResult",
        "description": "Result of deleting a field",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
        },
        "properties": {
          "id": {
            "description": "ID of the field deleted",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListMessageTypesResult": {
        "title": "ListMessageTypesResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "type": "user",
              "name": "Newsletters",
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the message type",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the message type",
                  "example": "user",
                  "type": "string",
                  "enum": [
                    "account",
                    "all",
                    "user"
                  ]
                },
                "name": {
                  "description": "Name of the message type",
                  "example": "Newsletters",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "ListSegmentsResult": {
        "title": "ListSegmentsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "Opened Campaign",
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the segment",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the segment",
                  "example": "Opened Campaign",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GetSegmentResult": {
        "title": "GetSegmentResult",
        "description": "Result of getting a segment",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "Opened Campaign",
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the segment",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the segment",
            "example": "Opened Campaign",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateSuppressionListResult": {
        "title": "CreateSuppressionListResult",
        "description": "Result of creating a suppression list",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the suppression list created.",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListSuppressionListsResult": {
        "title": "ListSuppressionListsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "file_name": "suppressed_contacts.csv",
              "file_size": 65536,
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the suppression list",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "file_name": {
                  "description": "File name of the suppression list",
                  "example": "suppressed_contacts.csv",
                  "type": "string"
                },
                "file_size": {
                  "description": "Size in bytes of the suppression list",
                  "example": 65536,
                  "type": "integer"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GetSuppressionListResult": {
        "title": "GetSuppressionListResult",
        "description": "Result of getting a suppression list",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "file_name": "suppressed_contacts.csv",
          "file_size": 65536,
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the suppression list",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "file_name": {
            "description": "File name of the suppression list",
            "example": "suppressed_contacts.csv",
            "type": "string"
          },
          "file_size": {
            "description": "Size in bytes of the suppression list",
            "example": 65536,
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListBulkCampaignsResult": {
        "title": "ListBulkCampaignsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "March 2022 Campaign",
              "created": 1568654293,
              "subject": "The January Newsletter",
              "from": {
                "email": "chris@bigmailer.io",
                "name": "Chris"
              },
              "recipient_name": "*|FIRST_NAME|*",
              "reply_to": {
                "email": "chris@bigmailer.io",
                "name": "Chris"
              },
              "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
              "preview": "Hurry, 50% Off for 2 Days Only!",
              "track_opens": true,
              "track_clicks": true,
              "track_text_clicks": true,
              "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "list_ids": [
                "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
              ],
              "excluded_list_ids": [
                "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
              ],
              "scheduled_for": 1568654293,
              "throttling_type": "burst",
              "throttling_amount": 1000,
              "throttling_period": 900,
              "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "num_sent": 100,
              "num_rejected": 10,
              "num_clicks": 20,
              "num_total_clicks": 30,
              "num_opens": 50,
              "num_total_opens": 60,
              "num_hard_bounces": 4,
              "num_soft_bounces": 8,
              "num_complaints": 2,
              "num_unsubscribes": 3,
              "status": "draft"
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the campaign",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the campaign",
                  "example": "March 2022 Campaign",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                },
                "subject": {
                  "description": "Subject line for the campaign",
                  "example": "The January Newsletter",
                  "type": "string"
                },
                "from": {
                  "properties": {
                    "email": {
                      "description": "From email address",
                      "type": "string",
                      "format": "email"
                    },
                    "name": {
                      "description": "From name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "recipient_name": {
                  "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                  "example": "*|FIRST_NAME|*",
                  "type": "string"
                },
                "reply_to": {
                  "properties": {
                    "email": {
                      "description": "Reply to email address",
                      "type": "string",
                      "format": "email"
                    },
                    "name": {
                      "description": "Reply to name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "link_params": {
                  "description": "Additional query string parameters to add to all links in the template.",
                  "example": "utm_campaign=spring_sale&utm_medium=cpc",
                  "type": "string"
                },
                "preview": {
                  "description": "Copy shown following your subject line in many email clients.",
                  "example": "Hurry, 50% Off for 2 Days Only!",
                  "type": "string"
                },
                "track_opens": {
                  "description": "True to enable open tracking (HTML campaigns only).",
                  "example": true,
                  "type": "boolean"
                },
                "track_clicks": {
                  "description": "True to enable click tracking in HTML links.",
                  "example": true,
                  "type": "boolean"
                },
                "track_text_clicks": {
                  "description": "True to enable click tracking in text links.",
                  "example": true,
                  "type": "boolean"
                },
                "segment_id": {
                  "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
                  "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "type": "string",
                  "format": "uuid"
                },
                "message_type_id": {
                  "description": "ID of the message type of the campaign.",
                  "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "type": "string",
                  "format": "uuid"
                },
                "list_ids": {
                  "description": "An array of list ids to send the campaign to.",
                  "example": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "items": {
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "excluded_list_ids": {
                  "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
                  "example": [
                    "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
                  ],
                  "items": {
                    "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "scheduled_for": {
                  "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
                  "example": 1568654293,
                  "type": "integer"
                },
                "throttling_type": {
                  "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
                  "example": "burst",
                  "type": "string",
                  "enum": [
                    "none",
                    "burst"
                  ]
                },
                "throttling_amount": {
                  "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
                  "example": 1000,
                  "type": "integer",
                  "multipleOf": 1000,
                  "minimum": 1000,
                  "maximum": 1000000
                },
                "throttling_period": {
                  "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
                  "example": 900,
                  "type": "integer",
                  "enum": [
                    900,
                    1800,
                    3600,
                    7200
                  ]
                },
                "suppression_list_id": {
                  "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
                  "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "type": "string",
                  "format": "uuid"
                },
                "num_sent": {
                  "description": "Number of emails sent.",
                  "example": 100,
                  "type": "integer"
                },
                "num_rejected": {
                  "description": "Number of emails rejected.",
                  "example": 10,
                  "type": "integer"
                },
                "num_clicks": {
                  "description": "Number of unique clicks.",
                  "example": 20,
                  "type": "integer"
                },
                "num_total_clicks": {
                  "description": "Number of total clicks (non-unique).",
                  "example": 30,
                  "type": "integer"
                },
                "num_opens": {
                  "description": "Number of unique opens.",
                  "example": 50,
                  "type": "integer"
                },
                "num_total_opens": {
                  "description": "Number of total opens (non-unique).",
                  "example": 60,
                  "type": "integer"
                },
                "num_hard_bounces": {
                  "description": "Number of emails sent that hard bounced.",
                  "example": 4,
                  "type": "integer"
                },
                "num_soft_bounces": {
                  "description": "Number of emails sent that soft bounced.",
                  "example": 8,
                  "type": "integer"
                },
                "num_complaints": {
                  "description": "Number of emails sent that complained.",
                  "example": 2,
                  "type": "integer"
                },
                "num_unsubscribes": {
                  "description": "Number of emails sent that unsubscribed.",
                  "example": 3,
                  "type": "integer"
                },
                "status": {
                  "description": "Status of the campaign.",
                  "example": "draft",
                  "type": "string",
                  "enum": [
                    "draft",
                    "pending",
                    "in progress",
                    "complete",
                    "error",
                    "paused",
                    "archived",
                    "active"
                  ]
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GetBulkCampaignResult": {
        "title": "GetBulkCampaignResult",
        "description": "Result of getting a bulk campaign",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "March 2022 Campaign",
          "created": 1568654293,
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_ids": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "excluded_list_ids": [
            "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
          ],
          "scheduled_for": 1568654293,
          "throttling_type": "burst",
          "throttling_amount": 1000,
          "throttling_period": 900,
          "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "num_sent": 100,
          "num_rejected": 10,
          "num_clicks": 20,
          "num_total_clicks": 30,
          "num_opens": 50,
          "num_total_opens": 60,
          "num_hard_bounces": 4,
          "num_soft_bounces": 8,
          "num_complaints": 2,
          "num_unsubscribes": 3,
          "status": "draft"
        },
        "properties": {
          "id": {
            "description": "ID of the campaign",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "segment_id": {
            "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_ids": {
            "description": "An array of list ids to send the campaign to.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "excluded_list_ids": {
            "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
            "example": [
              "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
            ],
            "items": {
              "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "scheduled_for": {
            "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
            "example": 1568654293,
            "type": "integer"
          },
          "throttling_type": {
            "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
            "example": "burst",
            "type": "string",
            "enum": [
              "none",
              "burst"
            ]
          },
          "throttling_amount": {
            "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
            "example": 1000,
            "type": "integer",
            "multipleOf": 1000,
            "minimum": 1000,
            "maximum": 1000000
          },
          "throttling_period": {
            "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
            "example": 900,
            "type": "integer",
            "enum": [
              900,
              1800,
              3600,
              7200
            ]
          },
          "suppression_list_id": {
            "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "num_sent": {
            "description": "Number of emails sent.",
            "example": 100,
            "type": "integer"
          },
          "num_rejected": {
            "description": "Number of emails rejected.",
            "example": 10,
            "type": "integer"
          },
          "num_clicks": {
            "description": "Number of unique clicks.",
            "example": 20,
            "type": "integer"
          },
          "num_total_clicks": {
            "description": "Number of total clicks (non-unique).",
            "example": 30,
            "type": "integer"
          },
          "num_opens": {
            "description": "Number of unique opens.",
            "example": 50,
            "type": "integer"
          },
          "num_total_opens": {
            "description": "Number of total opens (non-unique).",
            "example": 60,
            "type": "integer"
          },
          "num_hard_bounces": {
            "description": "Number of emails sent that hard bounced.",
            "example": 4,
            "type": "integer"
          },
          "num_soft_bounces": {
            "description": "Number of emails sent that soft bounced.",
            "example": 8,
            "type": "integer"
          },
          "num_complaints": {
            "description": "Number of emails sent that complained.",
            "example": 2,
            "type": "integer"
          },
          "num_unsubscribes": {
            "description": "Number of emails sent that unsubscribed.",
            "example": 3,
            "type": "integer"
          },
          "status": {
            "description": "Status of the campaign.",
            "example": "draft",
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "in progress",
              "complete",
              "error",
              "paused",
              "archived",
              "active"
            ]
          }
        },
        "type": "object"
      },
      "CreateBulkCampaignPayload": {
        "title": "CreateBulkCampaignPayload",
        "example": {
          "name": "March 2022 Campaign",
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_ids": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "excluded_list_ids": [
            "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
          ],
          "scheduled_for": 1568654293,
          "throttling_type": "burst",
          "throttling_amount": 1000,
          "throttling_period": 900,
          "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "ready": true
        },
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "segment_id": {
            "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_ids": {
            "description": "An array of list ids to send the campaign to.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "excluded_list_ids": {
            "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
            "example": [
              "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
            ],
            "items": {
              "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "scheduled_for": {
            "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
            "example": 1568654293,
            "type": "integer"
          },
          "throttling_type": {
            "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
            "example": "burst",
            "type": "string",
            "enum": [
              "none",
              "burst"
            ]
          },
          "throttling_amount": {
            "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
            "example": 1000,
            "type": "integer",
            "multipleOf": 1000,
            "minimum": 1000,
            "maximum": 1000000
          },
          "throttling_period": {
            "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
            "example": 900,
            "type": "integer",
            "enum": [
              900,
              1800,
              3600,
              7200
            ]
          },
          "suppression_list_id": {
            "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "ready": {
            "description": "Set to true to send or schedule the campaign. The campaign will not be sent or scheduled until activated by setting ready to true.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateBulkCampaignResult": {
        "title": "CreateBulkCampaignResult",
        "description": "Result of creating a bulk campaign",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the bulk campaign created.",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateBulkCampaignPayload": {
        "title": "UpdateBulkCampaignPayload",
        "example": {
          "name": "March 2022 Campaign",
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "segment_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_ids": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "excluded_list_ids": [
            "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
          ],
          "scheduled_for": 1568654293,
          "throttling_type": "burst",
          "throttling_amount": 1000,
          "throttling_period": 900,
          "suppression_list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "ready": true
        },
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "segment_id": {
            "description": "ID of a segment used to filter the lists of contacts the campaign is sent to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_ids": {
            "description": "An array of list ids to send the campaign to.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "excluded_list_ids": {
            "description": "An array of list ids to exclude from the campaign. Any contacts on these lists will not be sent the campaign.",
            "example": [
              "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c"
            ],
            "items": {
              "example": "9b480ee4-cddd-4f11-92d2-15f7d0f18f9c",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "scheduled_for": {
            "description": "Time at which to send the campaign. Measured in seconds since the UNIX epoch. Omit to send the campaign immediately.",
            "example": 1568654293,
            "type": "integer"
          },
          "throttling_type": {
            "description": "Set to `none` to send the campaign as fast as possible. Set to `burst` to send the campaign in small batches over time.",
            "example": "burst",
            "type": "string",
            "enum": [
              "none",
              "burst"
            ]
          },
          "throttling_amount": {
            "description": "Number of emails to send in each per batch. Must be a multiple of 1000. Required if `throttling_type` is `burst`.",
            "example": 1000,
            "type": "integer",
            "multipleOf": 1000,
            "minimum": 1000,
            "maximum": 1000000
          },
          "throttling_period": {
            "description": "Time in seconds between sending each batch of emails. Required if `throttling_type` is `burst`.",
            "example": 900,
            "type": "integer",
            "enum": [
              900,
              1800,
              3600,
              7200
            ]
          },
          "suppression_list_id": {
            "description": "ID of a suppression list. Any emails in the suppression list will not be sent the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "ready": {
            "description": "Set to true to send or schedule the campaign. The campaign will not be sent or scheduled until activated by setting ready to true.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateBulkCampaignResult": {
        "title": "UpdateBulkCampaignResult",
        "description": "Result of updating a bulk campaign",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the bulk campaign updated.",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListTransactionalCampaignsResult": {
        "title": "ListTransactionalCampaignsResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "name": "March 2022 Campaign",
              "created": 1568654293,
              "subject": "The January Newsletter",
              "from": {
                "email": "chris@bigmailer.io",
                "name": "Chris"
              },
              "recipient_name": "*|FIRST_NAME|*",
              "reply_to": {
                "email": "chris@bigmailer.io",
                "name": "Chris"
              },
              "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
              "preview": "Hurry, 50% Off for 2 Days Only!",
              "track_opens": true,
              "track_clicks": true,
              "track_text_clicks": true,
              "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "num_sent": 100,
              "num_rejected": 10,
              "num_clicks": 20,
              "num_total_clicks": 30,
              "num_opens": 50,
              "num_total_opens": 60,
              "num_hard_bounces": 4,
              "num_soft_bounces": 8,
              "num_complaints": 2,
              "num_unsubscribes": 3,
              "status": "draft"
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the campaign",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the campaign",
                  "example": "March 2022 Campaign",
                  "type": "string"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                },
                "subject": {
                  "description": "Subject line for the campaign",
                  "example": "The January Newsletter",
                  "type": "string"
                },
                "from": {
                  "properties": {
                    "email": {
                      "description": "From email address",
                      "type": "string",
                      "format": "email"
                    },
                    "name": {
                      "description": "From name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "recipient_name": {
                  "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
                  "example": "*|FIRST_NAME|*",
                  "type": "string"
                },
                "reply_to": {
                  "properties": {
                    "email": {
                      "description": "Reply to email address",
                      "type": "string",
                      "format": "email"
                    },
                    "name": {
                      "description": "Reply to name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "link_params": {
                  "description": "Additional query string parameters to add to all links in the template.",
                  "example": "utm_campaign=spring_sale&utm_medium=cpc",
                  "type": "string"
                },
                "preview": {
                  "description": "Copy shown following your subject line in many email clients.",
                  "example": "Hurry, 50% Off for 2 Days Only!",
                  "type": "string"
                },
                "track_opens": {
                  "description": "True to enable open tracking (HTML campaigns only).",
                  "example": true,
                  "type": "boolean"
                },
                "track_clicks": {
                  "description": "True to enable click tracking in HTML links.",
                  "example": true,
                  "type": "boolean"
                },
                "track_text_clicks": {
                  "description": "True to enable click tracking in text links.",
                  "example": true,
                  "type": "boolean"
                },
                "message_type_id": {
                  "description": "ID of the message type of the campaign.",
                  "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "type": "string",
                  "format": "uuid"
                },
                "list_id": {
                  "description": "ID of a list contacts sent the transactional campaign should be added to.",
                  "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                  "type": "string",
                  "format": "uuid"
                },
                "num_sent": {
                  "description": "Number of emails sent.",
                  "example": 100,
                  "type": "integer"
                },
                "num_rejected": {
                  "description": "Number of emails rejected.",
                  "example": 10,
                  "type": "integer"
                },
                "num_clicks": {
                  "description": "Number of unique clicks.",
                  "example": 20,
                  "type": "integer"
                },
                "num_total_clicks": {
                  "description": "Number of total clicks (non-unique).",
                  "example": 30,
                  "type": "integer"
                },
                "num_opens": {
                  "description": "Number of unique opens.",
                  "example": 50,
                  "type": "integer"
                },
                "num_total_opens": {
                  "description": "Number of total opens (non-unique).",
                  "example": 60,
                  "type": "integer"
                },
                "num_hard_bounces": {
                  "description": "Number of emails sent that hard bounced.",
                  "example": 4,
                  "type": "integer"
                },
                "num_soft_bounces": {
                  "description": "Number of emails sent that soft bounced.",
                  "example": 8,
                  "type": "integer"
                },
                "num_complaints": {
                  "description": "Number of emails sent that complained.",
                  "example": 2,
                  "type": "integer"
                },
                "num_unsubscribes": {
                  "description": "Number of emails sent that unsubscribed.",
                  "example": 3,
                  "type": "integer"
                },
                "status": {
                  "description": "Status of the campaign.",
                  "example": "draft",
                  "type": "string",
                  "enum": [
                    "draft",
                    "pending",
                    "in progress",
                    "complete",
                    "error",
                    "paused",
                    "archived",
                    "active"
                  ]
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GetTransactionalCampaignResult": {
        "title": "GetTransactionalCampaignResult",
        "description": "Result of getting a transactional campaign",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "name": "March 2022 Campaign",
          "created": 1568654293,
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "num_sent": 100,
          "num_rejected": 10,
          "num_clicks": 20,
          "num_total_clicks": 30,
          "num_opens": 50,
          "num_total_opens": 60,
          "num_hard_bounces": 4,
          "num_soft_bounces": 8,
          "num_complaints": 2,
          "num_unsubscribes": 3,
          "status": "draft"
        },
        "properties": {
          "id": {
            "description": "ID of the campaign",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_id": {
            "description": "ID of a list contacts sent the transactional campaign should be added to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "num_sent": {
            "description": "Number of emails sent.",
            "example": 100,
            "type": "integer"
          },
          "num_rejected": {
            "description": "Number of emails rejected.",
            "example": 10,
            "type": "integer"
          },
          "num_clicks": {
            "description": "Number of unique clicks.",
            "example": 20,
            "type": "integer"
          },
          "num_total_clicks": {
            "description": "Number of total clicks (non-unique).",
            "example": 30,
            "type": "integer"
          },
          "num_opens": {
            "description": "Number of unique opens.",
            "example": 50,
            "type": "integer"
          },
          "num_total_opens": {
            "description": "Number of total opens (non-unique).",
            "example": 60,
            "type": "integer"
          },
          "num_hard_bounces": {
            "description": "Number of emails sent that hard bounced.",
            "example": 4,
            "type": "integer"
          },
          "num_soft_bounces": {
            "description": "Number of emails sent that soft bounced.",
            "example": 8,
            "type": "integer"
          },
          "num_complaints": {
            "description": "Number of emails sent that complained.",
            "example": 2,
            "type": "integer"
          },
          "num_unsubscribes": {
            "description": "Number of emails sent that unsubscribed.",
            "example": 3,
            "type": "integer"
          },
          "status": {
            "description": "Status of the campaign.",
            "example": "draft",
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "in progress",
              "complete",
              "error",
              "paused",
              "archived",
              "active"
            ]
          }
        },
        "type": "object"
      },
      "CreateTransactionalCampaignPayload": {
        "title": "CreateTransactionalCampaignPayload",
        "example": {
          "name": "March 2022 Campaign",
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "ready": true
        },
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_id": {
            "description": "ID of a list contacts sent the transactional campaign should be added to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "ready": {
            "description": "Set to true to activate the campaign. The campaign cannot be sent until activated by setting ready to true.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateTransactionalCampaignResult": {
        "title": "CreateTransactionalCampaignResult",
        "description": "Result of creating a transactional campaign",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the transactional campaign created.",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateTransactionalCampaignPayload": {
        "title": "UpdateTransactionalCampaignPayload",
        "example": {
          "name": "March 2022 Campaign",
          "subject": "The January Newsletter",
          "from": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "recipient_name": "*|FIRST_NAME|*",
          "reply_to": {
            "email": "chris@bigmailer.io",
            "name": "Chris"
          },
          "link_params": "utm_campaign=spring_sale&utm_medium=cpc",
          "preview": "Hurry, 50% Off for 2 Days Only!",
          "html": "<p>This is the html body.</p>",
          "text": "This is the text body.",
          "track_opens": true,
          "track_clicks": true,
          "track_text_clicks": true,
          "message_type_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "list_id": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
          "ready": true
        },
        "properties": {
          "name": {
            "description": "Name of the campaign",
            "example": "March 2022 Campaign",
            "type": "string"
          },
          "subject": {
            "description": "Subject line for the campaign",
            "example": "The January Newsletter",
            "type": "string"
          },
          "from": {
            "properties": {
              "email": {
                "description": "From email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "From name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recipient_name": {
            "description": "Name of the recipient. Use merge tags to make it more personal and avoid spam filters.",
            "example": "*|FIRST_NAME|*",
            "type": "string"
          },
          "reply_to": {
            "properties": {
              "email": {
                "description": "Reply to email address",
                "type": "string",
                "format": "email"
              },
              "name": {
                "description": "Reply to name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "link_params": {
            "description": "Additional query string parameters to add to all links in the template.",
            "example": "utm_campaign=spring_sale&utm_medium=cpc",
            "type": "string"
          },
          "preview": {
            "description": "Copy shown following your subject line in many email clients.",
            "example": "Hurry, 50% Off for 2 Days Only!",
            "type": "string"
          },
          "html": {
            "description": "HTML body of the email.",
            "example": "<p>This is the html body.</p>",
            "type": "string"
          },
          "text": {
            "description": "Text body of the email.",
            "example": "This is the text body.",
            "type": "string"
          },
          "track_opens": {
            "description": "True to enable open tracking (HTML campaigns only).",
            "example": true,
            "type": "boolean"
          },
          "track_clicks": {
            "description": "True to enable click tracking in HTML links.",
            "example": true,
            "type": "boolean"
          },
          "track_text_clicks": {
            "description": "True to enable click tracking in text links.",
            "example": true,
            "type": "boolean"
          },
          "message_type_id": {
            "description": "ID of the message type of the campaign.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "list_id": {
            "description": "ID of a list contacts sent the transactional campaign should be added to.",
            "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
            "type": "string",
            "format": "uuid"
          },
          "ready": {
            "description": "Set to true to activate the campaign. The campaign cannot be sent until activated by setting ready to true.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateTransactionalCampaignResult": {
        "title": "UpdateTransactionalCampaignResult",
        "description": "Result of updating a transactional campaign",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the transactional campaign updated.",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SendTransactionalCampaignPayload": {
        "title": "SendTransactionalCampaignPayload",
        "example": {
          "email": "chris@bigmailer.io",
          "field_values": [
            {
              "name": "FIRST NAME",
              "string": "Christopher"
            },
            {
              "name": "BIRTHDAY",
              "date": "1981-12-04"
            },
            {
              "name": "EMPLOYEE ID",
              "integer": 12345
            }
          ],
          "variables": [
            {
              "name": "COMPANY",
              "value": "Widgets, LTD."
            },
            {
              "name": "ADDRESS",
              "value": "123 Main Street"
            }
          ]
        },
        "properties": {
          "email": {
            "description": "Email address of the contact",
            "example": "chris@bigmailer.io",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "field_values": {
            "description": "Field values are saved along with the email as part of the contact. Additionally, they are used as variables when generating the email content (body, subject, and recipient name).\n\nEach name must match the tag name of a field that exists in the brand.\n\nEach field value must have exactly one of string, integer, or date.\n\n",
            "example": [
              {
                "name": "FIRST NAME",
                "string": "Christopher"
              },
              {
                "name": "BIRTHDAY",
                "date": "1981-12-04"
              },
              {
                "name": "EMPLOYEE ID",
                "integer": 12345
              }
            ],
            "items": {
              "title": "FieldValuePayload",
              "example": {
                "name": "MEMBER ID",
                "integer": 12345
              },
              "properties": {
                "date": {
                  "example": "2019-11-27",
                  "format": "date",
                  "type": "string"
                },
                "integer": {
                  "example": 4995590933000642000,
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "example": "FIRST NAME",
                  "type": "string"
                },
                "string": {
                  "example": "Christopher",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "variables": {
            "description": "Variables to substitute into the email content (body, subject, and recipient name). Unlike field_values, they are **NOT** saved as part of the contact.",
            "example": [
              {
                "name": "COMPANY",
                "value": "Widgets, LTD."
              },
              {
                "name": "ADDRESS",
                "value": "123 Main Street"
              }
            ],
            "items": {
              "title": "VariablePayload",
              "example": {
                "name": "FIRST NAME",
                "value": "Christopher"
              },
              "properties": {
                "name": {
                  "example": "FIRST NAME",
                  "type": "string"
                },
                "value": {
                  "example": "Christopher",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "SendTransactionalCampaignResult": {
        "title": "SendTransactionalCampaignResult",
        "description": "Result of sending a transactional email",
        "example": {
          "contact_id": "38323da7-f824-4ada-8fcd-cd48a2f51fcf"
        },
        "properties": {
          "contact_id": {
            "description": "ID of the contact inserted or updated",
            "example": "38323da7-f824-4ada-8fcd-cd48a2f51fcf",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListUsersResult": {
        "title": "ListUsersResult",
        "example": {
          "has_more": false,
          "cursor": "K5pwIGH3hgYrhytbDUY5eQ==",
          "data": [
            {
              "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
              "role": "brand_manager",
              "email": "chris@bigmailer.io",
              "is_owner": true,
              "is_activated": true,
              "allowed_brands": [
                "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
              ],
              "activated": 1568654394,
              "created": 1568654293
            }
          ]
        },
        "properties": {
          "has_more": {
            "description": "Whether or not there are more elements after this set. If `false`, this set comprises the end of the list.",
            "example": true,
            "type": "boolean"
          },
          "cursor": {
            "description": "A cursor for use in pagination. `cursor` defines your place in the list. For instance, if you make a list request and receive 100 objects along with cursor `xyz123`, your subsequent call can include `cursor=xyz123` in order to fetch the next page of the list.",
            "example": "K5pwIGH3hgYrhytbDUY5eQ==",
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the user",
                  "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
                  "format": "uuid",
                  "type": "string"
                },
                "role": {
                  "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
                  "example": "brand_manager",
                  "type": "string",
                  "enum": [
                    "admin",
                    "account_manager",
                    "brand_manager",
                    "campaign_manager",
                    "template_manager"
                  ]
                },
                "email": {
                  "description": "User's email address",
                  "example": "chris@bigmailer.io",
                  "type": "string",
                  "format": "email"
                },
                "is_owner": {
                  "description": "true if the user is the account owner. An account owner cannot be deleted.",
                  "example": true,
                  "type": "boolean"
                },
                "is_activated": {
                  "description": "true if the user is activated. A user becomes activated by clicking the link in the invitation email.",
                  "example": true,
                  "type": "boolean"
                },
                "allowed_brands": {
                  "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
                  "example": [
                    "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
                  ],
                  "items": {
                    "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "activated": {
                  "description": "Time at which the user was activated. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                },
                "created": {
                  "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
                  "example": 1592422352,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "CreateUserPayload": {
        "title": "CreateUserPayload",
        "example": {
          "role": "brand_manager",
          "email": "chris@bigmailer.io",
          "allowed_brands": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "invitation_message": "Please join our account."
        },
        "properties": {
          "role": {
            "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
            "example": "brand_manager",
            "type": "string",
            "enum": [
              "admin",
              "account_manager",
              "brand_manager",
              "campaign_manager",
              "template_manager"
            ]
          },
          "email": {
            "description": "User's email address",
            "example": "chris@bigmailer.io",
            "type": "string",
            "format": "email"
          },
          "allowed_brands": {
            "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "invitation_message": {
            "description": "A message to include in the invitation email.",
            "example": "Please join our account.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "type": "object"
      },
      "CreateUserResult": {
        "title": "CreateUserResult",
        "description": "Result of creating a user",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the user inserted",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetUserResult": {
        "title": "GetUserResult",
        "description": "Result of getting a user",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
          "role": "brand_manager",
          "email": "chris@bigmailer.io",
          "is_owner": true,
          "is_activated": true,
          "allowed_brands": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ],
          "activated": 1568654394,
          "created": 1568654293
        },
        "properties": {
          "id": {
            "description": "ID of the user",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
            "example": "brand_manager",
            "type": "string",
            "enum": [
              "admin",
              "account_manager",
              "brand_manager",
              "campaign_manager",
              "template_manager"
            ]
          },
          "email": {
            "description": "User's email address",
            "example": "chris@bigmailer.io",
            "type": "string",
            "format": "email"
          },
          "is_owner": {
            "description": "true if the user is the account owner. An account owner cannot be deleted.",
            "example": true,
            "type": "boolean"
          },
          "is_activated": {
            "description": "true if the user is activated. A user becomes activated by clicking the link in the invitation email.",
            "example": true,
            "type": "boolean"
          },
          "allowed_brands": {
            "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "activated": {
            "description": "Time at which the user was activated. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the UNIX epoch.",
            "example": 1592422352,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateUserPayload": {
        "title": "UpdateUserPayload",
        "example": {
          "role": "brand_manager",
          "email": "chris@bigmailer.io",
          "allowed_brands": [
            "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
          ]
        },
        "properties": {
          "role": {
            "description": "The user role determines what actions the user may perform. See our [description of user roles](https://docs.bigmailer.io/docs/user-types-and-permissions).",
            "example": "brand_manager",
            "type": "string",
            "enum": [
              "admin",
              "account_manager",
              "brand_manager",
              "campaign_manager",
              "template_manager"
            ]
          },
          "email": {
            "description": "User's email address",
            "example": "chris@bigmailer.io",
            "type": "string",
            "format": "email"
          },
          "allowed_brands": {
            "description": "A list of brand IDs the user is allowed to access. Only relevant if the role is brand_manager, campaign_manager, or template_manager.",
            "example": [
              "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef"
            ],
            "items": {
              "example": "b4326936-9e08-4cf9-95fe-c44c8cf4e4ef",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateUserResult": {
        "title": "UpdateUserResult",
        "description": "Result of updating a user",
        "example": {
          "id": "3887bafa-1929-4065-8e0d-9684dabbe118"
        },
        "properties": {
          "id": {
            "description": "ID of the user updated",
            "example": "3887bafa-1929-4065-8e0d-9684dabbe118",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteUserResult": {
        "title": "DeleteUserResult",
        "description": "Result of deleting a user",
        "example": {
          "id": "66e60ece-d4e4-4286-8ea6-990cb500aa8e"
        },
        "properties": {
          "id": {
            "description": "ID of the user deleted",
            "example": "66e60ece-d4e4-4286-8ea6-990cb500aa8e",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldValuePayload": {
        "title": "FieldValuePayload",
        "example": {
          "name": "MEMBER ID",
          "integer": 12345
        },
        "properties": {
          "date": {
            "example": "2019-11-27",
            "format": "date",
            "type": "string"
          },
          "integer": {
            "example": 4995590933000642000,
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "example": "FIRST NAME",
            "type": "string"
          },
          "string": {
            "example": "Christopher",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "VariablePayload": {
        "title": "VariablePayload",
        "example": {
          "name": "FIRST NAME",
          "value": "Christopher"
        },
        "properties": {
          "name": {
            "example": "FIRST NAME",
            "type": "string"
          },
          "value": {
            "example": "Christopher",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "ContactExistsError": {
        "title": "Contact Exists Error",
        "description": "The contact already exists.",
        "example": {
          "type": "invalid_request_error",
          "message": "Contact already exists with this email.",
          "param": "email",
          "code": "resource_already_exists"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Contact already exists with this email.",
            "type": "string"
          },
          "param": {
            "description": "The parameter related to the error.",
            "example": "email",
            "type": "string"
          },
          "code": {
            "description": "Code to aid in handling the error programatically.",
            "example": "resource_already_exists",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldExistsError": {
        "title": "Field Exists Error",
        "description": "A field already exists with the chosen merge tag name.",
        "example": {
          "type": "invalid_request_error",
          "message": "Field already exists with this merge_tag_name.",
          "param": "merge_tag_name",
          "code": "resource_already_exists"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Field already exists with this merge_tag_name.",
            "type": "string"
          },
          "param": {
            "description": "The parameter related to the error.",
            "example": "email",
            "type": "string"
          },
          "code": {
            "description": "Code to aid in handling the error programatically.",
            "example": "resource_already_exists",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserExistsError": {
        "title": "User Exists Error",
        "description": "The user already exists.",
        "example": {
          "type": "invalid_request_error",
          "message": "User already exists with this email.",
          "param": "email",
          "code": "resource_already_exists"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "User already exists with this email.",
            "type": "string"
          },
          "param": {
            "description": "The parameter related to the error.",
            "example": "email",
            "type": "string"
          },
          "code": {
            "description": "Code to aid in handling the error programatically.",
            "example": "resource_already_exists",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvalidRequestError": {
        "title": "InvalidRequestError",
        "description": "Object containing error information.",
        "example": {
          "type": "invalid_request_error",
          "message": "Email address is invalid.",
          "param": "email",
          "code": "invalid_format"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Email address is invalid.",
            "type": "string"
          },
          "param": {
            "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
            "example": "email",
            "type": "string"
          },
          "code": {
            "description": "For some errors that could be handled programmatically, a short string indicating the error code reported.",
            "example": "invalid_format",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UnauthorizedError": {
        "title": "Unauthorized Error",
        "description": "The API key does not exist.",
        "example": {
          "type": "authentication_error",
          "message": "Unknown API key"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "authentication_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Unknown API key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ForbiddenError": {
        "title": "Forbidden Error",
        "description": "The system understands the request but refuses to authorize it.",
        "example": {
          "type": "invalid_request_error",
          "message": "The API is only accessible over HTTPS."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "The API is only accessible over HTTPS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TooManyRequestsError": {
        "title": "Too Many Requests Error",
        "description": "The client has made too many requests.",
        "example": {
          "type": "rate_limit_error",
          "message": "API request limit has been exceeded."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "rate_limit_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "API request limit has been exceeded.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceMissingError": {
        "title": "Resource Missing Error",
        "description": "A requested resource does not exist.",
        "example": {
          "type": "invalid_request_error",
          "message": "Item does not exist in this brand.",
          "param": "brand_id",
          "code": "resource_missing"
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "invalid_request_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Item does not exist in this brand.",
            "type": "string"
          },
          "param": {
            "description": "The parameter related to the error.",
            "example": "brand_id",
            "type": "string"
          },
          "code": {
            "description": "Code to aid in handling the error programatically.",
            "example": "resource_missing",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PreconditionFailedError": {
        "title": "Precondition failed error",
        "description": "The operation was rejected because the system is not in a state required for the operation's execution.",
        "example": {
          "type": "failed_precondition",
          "message": "The campaign cannot be sent in it's current state.",
          "preconditions": [
            "subject.format",
            "lists.length"
          ]
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "failed_precondition",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "The campaign cannot be sent in it's current state.",
            "type": "string"
          },
          "preconditions": {
            "description": "A list of codes to aid in handling the error programatically.",
            "items": {
              "type": "string"
            },
            "example": [
              "subject.format",
              "lists.length"
            ],
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerError": {
        "title": "Server Error",
        "description": "The server encountered an unexpected error.",
        "example": {
          "type": "api_error",
          "message": "An unexpected error occurred."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "api_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "An unexpected error occurred.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UnderMaintenanceError": {
        "title": "Under maintenance error",
        "description": "The system is under maintenance. Please try again later.",
        "example": {
          "type": "server_error",
          "message": "Service temporarily unavailable. Please try again after date in Retry-After header."
        },
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "example": "server_error",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "example": "Service temporarily unavailable. Please try again after date in Retry-After header.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}